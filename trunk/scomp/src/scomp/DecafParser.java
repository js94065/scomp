
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 29 23:08:22 CEST 2010
//----------------------------------------------------

package scomp;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Jun 29 23:08:22 CEST 2010
  */
public class DecafParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DecafParser() {super();}

  /** Constructor which sets the default scanner. */
  public DecafParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\003\006\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\003\003" +
    "\000\002\003\004\000\002\003\005\000\002\003\006\000" +
    "\002\003\007\000\002\003\007\000\002\003\010\000\002" +
    "\004\004\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\006\005" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\007\003\000\002\007\006\000\002\007\005\000\002" +
    "\007\006\000\002\007\006\000\002\010\004\000\002\010" +
    "\003\000\002\011\007\000\002\011\007\000\002\011\010" +
    "\000\002\011\010\000\002\011\007\000\002\011\010\000" +
    "\002\011\004\000\002\011\004\000\002\011\007\000\002" +
    "\011\007\000\002\011\010\000\002\011\010\000\002\011" +
    "\007\000\002\011\007\000\002\011\010\000\002\011\010" +
    "\000\002\012\003\000\002\012\005\000\002\012\005\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\006\000\002\020\004\000\002\020\005\000\002\020\005" +
    "\000\002\020\006\000\002\014\005\000\002\014\006\000" +
    "\002\015\003\000\002\015\005\000\002\021\003\000\002" +
    "\021\003\000\002\016\003\000\002\016\004\000\002\017" +
    "\006\000\002\017\004\000\002\017\007\000\002\017\011" +
    "\000\002\017\007\000\002\017\004\000\002\017\005\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\022\005\000\002\022\006\000\002\022\006\000\002\022" +
    "\010\000\002\026\003\000\002\026\005\000\002\027\003" +
    "\000\002\027\003\000\002\023\003\000\002\023\006\000" +
    "\002\024\003\000\002\024\005\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\006\003\005\007\006\001\002\000\004\002" +
    "\316\001\002\000\004\002\ufffc\001\002\000\006\003\007" +
    "\055\010\001\002\000\004\002\ufffb\001\002\000\006\003" +
    "\011\021\012\001\002\000\004\002\ufffa\001\002\000\014" +
    "\003\020\004\015\013\014\015\016\022\021\001\002\000" +
    "\006\003\310\055\311\001\002\000\006\003\uffc2\055\uffc2" +
    "\001\002\000\006\003\uffc1\055\uffc1\001\002\000\006\003" +
    "\272\055\273\001\002\000\014\003\264\004\015\013\014" +
    "\015\016\022\265\001\002\000\006\002\ufff9\055\245\001" +
    "\002\000\004\002\001\001\002\000\014\003\uffe5\004\uffe5" +
    "\013\uffe5\015\uffe5\022\uffe5\001\002\000\014\003\ufff4\004" +
    "\ufff4\013\ufff4\015\ufff4\022\ufff4\001\002\000\014\003\026" +
    "\004\015\013\014\015\016\022\027\001\002\000\006\003" +
    "\226\055\227\001\002\000\006\002\ufff7\055\031\001\002" +
    "\000\004\002\ufffe\001\002\000\014\003\uffe6\004\uffe6\013" +
    "\uffe6\015\uffe6\022\uffe6\001\002\000\004\017\032\001\002" +
    "\000\012\003\034\004\015\013\014\020\035\001\002\000" +
    "\006\003\224\055\225\001\002\000\004\055\223\001\002" +
    "\000\004\021\044\001\002\000\010\003\uffd4\020\uffd4\026" +
    "\uffd4\001\002\000\010\003\041\020\042\026\040\001\002" +
    "\000\010\003\034\004\015\013\014\001\002\000\010\003" +
    "\034\004\015\013\014\001\002\000\004\021\044\001\002" +
    "\000\014\003\uffdf\004\uffdf\013\uffdf\015\uffdf\022\uffdf\001" +
    "\002\000\032\003\061\004\015\005\057\006\045\010\047" +
    "\012\055\013\014\014\053\016\051\021\044\022\064\055" +
    "\054\001\002\000\004\017\205\001\002\000\004\025\202" +
    "\001\002\000\004\027\201\001\002\000\032\003\173\004" +
    "\015\005\057\006\045\010\047\012\055\013\014\014\053" +
    "\016\051\021\044\022\174\055\054\001\002\000\004\017" +
    "\165\001\002\000\026\003\163\005\057\006\045\010\047" +
    "\012\055\014\053\016\051\021\044\022\164\055\054\001" +
    "\002\000\024\006\045\017\101\027\157\030\105\032\075" +
    "\051\102\052\100\053\106\055\054\001\002\000\060\017" +
    "\145\020\uffac\023\146\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\047\uffac\050\uffac\001\002\000\004\017\074\001" +
    "\002\000\004\055\070\001\002\000\004\027\066\001\002" +
    "\000\026\003\uffb5\005\uffb5\006\uffb5\010\uffb5\012\uffb5\014" +
    "\uffb5\016\uffb5\021\uffb5\022\uffb5\055\uffb5\001\002\000\036" +
    "\003\uffca\004\uffca\005\uffca\006\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\021\uffca\022\uffca" +
    "\055\uffca\001\002\000\004\027\065\001\002\000\026\003" +
    "\uffc0\005\uffc0\006\uffc0\010\uffc0\012\uffc0\014\uffc0\016\uffc0" +
    "\021\uffc0\022\uffc0\055\uffc0\001\002\000\036\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\021\uffce\022\uffce\055\uffce\001" +
    "\002\000\026\003\uffbd\005\uffbd\006\uffbd\010\uffbd\012\uffbd" +
    "\014\uffbd\016\uffbd\021\uffbd\022\uffbd\055\uffbd\001\002\000" +
    "\026\003\uffb7\005\uffb7\006\uffb7\010\uffb7\012\uffb7\014\uffb7" +
    "\016\uffb7\021\uffb7\022\uffb7\055\uffb7\001\002\000\006\026" +
    "\071\027\072\001\002\000\006\026\uffc4\027\uffc4\001\002" +
    "\000\004\055\073\001\002\000\032\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6" +
    "\021\uffc6\022\uffc6\055\uffc6\001\002\000\006\026\uffc3\027" +
    "\uffc3\001\002\000\022\006\045\017\101\030\105\032\075" +
    "\051\102\052\100\053\106\055\054\001\002\000\022\006" +
    "\045\017\101\030\105\032\075\051\102\052\100\053\106" +
    "\055\054\001\002\000\044\020\140\031\112\032\125\033" +
    "\110\034\124\035\121\036\132\037\127\040\133\041\130" +
    "\042\120\043\123\044\131\045\114\046\116\047\111\050" +
    "\113\001\002\000\052\020\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\001\002\000\052\020\uff8c\024" +
    "\uff8c\026\uff8c\027\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\001\002" +
    "\000\022\006\045\017\101\030\105\032\075\051\102\052" +
    "\100\053\106\055\054\001\002\000\052\020\uff8d\024\uff8d" +
    "\026\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\001\002\000" +
    "\052\020\uffa8\024\uffa8\026\uffa8\027\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\001\002\000\052\020\uffa7\024\uffa7\026\uffa7\027" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\001\002\000\022\006\045" +
    "\017\101\030\105\032\075\051\102\052\100\053\106\055" +
    "\054\001\002\000\052\020\uff8b\024\uff8b\026\uff8b\027\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\001\002\000\052\020\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002" +
    "\000\022\006\uff9b\017\uff9b\030\uff9b\032\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\055\uff9b\001\002\000\022\006\uff8f\017\uff8f" +
    "\030\uff8f\032\uff8f\051\uff8f\052\uff8f\053\uff8f\055\uff8f\001" +
    "\002\000\022\006\uff9d\017\uff9d\030\uff9d\032\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\055\uff9d\001\002\000\022\006\uff8e\017" +
    "\uff8e\030\uff8e\032\uff8e\051\uff8e\052\uff8e\053\uff8e\055\uff8e" +
    "\001\002\000\022\006\uff91\017\uff91\030\uff91\032\uff91\051" +
    "\uff91\052\uff91\053\uff91\055\uff91\001\002\000\022\006\uff9e" +
    "\017\uff9e\030\uff9e\032\uff9e\051\uff9e\052\uff9e\053\uff9e\055" +
    "\uff9e\001\002\000\022\006\uff90\017\uff90\030\uff90\032\uff90" +
    "\051\uff90\052\uff90\053\uff90\055\uff90\001\002\000\022\006" +
    "\uff9f\017\uff9f\030\uff9f\032\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\055\uff9f\001\002\000\022\006\uff94\017\uff94\030\uff94\032" +
    "\uff94\051\uff94\052\uff94\053\uff94\055\uff94\001\002\000\022" +
    "\006\uff99\017\uff99\030\uff99\032\uff99\051\uff99\052\uff99\053" +
    "\uff99\055\uff99\001\002\000\022\006\uffa1\017\uffa1\030\uffa1" +
    "\032\uffa1\051\uffa1\052\uffa1\053\uffa1\055\uffa1\001\002\000" +
    "\022\006\uff93\017\uff93\030\uff93\032\uff93\051\uff93\052\uff93" +
    "\053\uff93\055\uff93\001\002\000\022\006\uff9a\017\uff9a\030" +
    "\uff9a\032\uff9a\051\uff9a\052\uff9a\053\uff9a\055\uff9a\001\002" +
    "\000\022\006\uff9c\017\uff9c\030\uff9c\032\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\055\uff9c\001\002\000\022\006\045\017\101" +
    "\030\105\032\075\051\102\052\100\053\106\055\054\001" +
    "\002\000\022\006\uff97\017\uff97\030\uff97\032\uff97\051\uff97" +
    "\052\uff97\053\uff97\055\uff97\001\002\000\022\006\uff95\017" +
    "\uff95\030\uff95\032\uff95\051\uff95\052\uff95\053\uff95\055\uff95" +
    "\001\002\000\022\006\uff92\017\uff92\030\uff92\032\uff92\051" +
    "\uff92\052\uff92\053\uff92\055\uff92\001\002\000\022\006\uff98" +
    "\017\uff98\030\uff98\032\uff98\051\uff98\052\uff98\053\uff98\055" +
    "\uff98\001\002\000\022\006\uff96\017\uff96\030\uff96\032\uff96" +
    "\051\uff96\052\uff96\053\uff96\055\uff96\001\002\000\022\006" +
    "\uffa0\017\uffa0\030\uffa0\032\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\001\002\000\052\020\uffa5\024\uffa5\026\uffa5\027" +
    "\uffa5\031\112\032\125\033\110\034\124\035\121\036\132" +
    "\037\127\040\133\041\130\042\120\043\123\044\131\045" +
    "\114\046\116\047\111\050\113\001\002\000\044\020\137" +
    "\031\112\032\125\033\110\034\124\035\121\036\132\037" +
    "\127\040\133\041\130\042\120\043\123\044\131\045\114" +
    "\046\116\047\111\050\113\001\002\000\052\020\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\001\002" +
    "\000\004\021\044\001\002\000\030\003\uffbc\005\uffbc\006" +
    "\uffbc\010\uffbc\011\142\012\uffbc\014\uffbc\016\uffbc\021\uffbc" +
    "\022\uffbc\055\uffbc\001\002\000\004\021\044\001\002\000" +
    "\026\003\uffbb\005\uffbb\006\uffbb\010\uffbb\012\uffbb\014\uffbb" +
    "\016\uffbb\021\uffbb\022\uffbb\055\uffbb\001\002\000\052\020" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\031\uffa4\032\uffa4\033\110" +
    "\034\124\035\121\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\001\002\000\024\006\045\017\101\020\151\030\105\032" +
    "\075\051\102\052\100\053\106\055\054\001\002\000\022" +
    "\006\045\017\101\030\105\032\075\051\102\052\100\053" +
    "\106\055\054\001\002\000\044\024\150\031\112\032\125" +
    "\033\110\034\124\035\121\036\132\037\127\040\133\041" +
    "\130\042\120\043\123\044\131\045\114\046\116\047\111" +
    "\050\113\001\002\000\054\020\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\001\002\000\052" +
    "\020\uffb4\024\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\046\020\uffaa\026\uffaa\031\112\032\125" +
    "\033\110\034\124\035\121\036\132\037\127\040\133\041" +
    "\130\042\120\043\123\044\131\045\114\046\116\047\111" +
    "\050\113\001\002\000\006\020\155\026\154\001\002\000" +
    "\022\006\045\017\101\030\105\032\075\051\102\052\100" +
    "\053\106\055\054\001\002\000\052\020\uffb3\024\uffb3\026" +
    "\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000\046" +
    "\020\uffa9\026\uffa9\031\112\032\125\033\110\034\124\035" +
    "\121\036\132\037\127\040\133\041\130\042\120\043\123" +
    "\044\131\045\114\046\116\047\111\050\113\001\002\000" +
    "\026\003\uffb9\005\uffb9\006\uffb9\010\uffb9\012\uffb9\014\uffb9" +
    "\016\uffb9\021\uffb9\022\uffb9\055\uffb9\001\002\000\044\027" +
    "\161\031\112\032\125\033\110\034\124\035\121\036\132" +
    "\037\127\040\133\041\130\042\120\043\123\044\131\045" +
    "\114\046\116\047\111\050\113\001\002\000\026\003\uffb8" +
    "\005\uffb8\006\uffb8\010\uffb8\012\uffb8\014\uffb8\016\uffb8\021" +
    "\uffb8\022\uffb8\055\uffb8\001\002\000\026\003\uffbf\005\uffbf" +
    "\006\uffbf\010\uffbf\012\uffbf\014\uffbf\016\uffbf\021\uffbf\022" +
    "\uffbf\055\uffbf\001\002\000\036\003\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\021\uffc8\022\uffc8\055\uffc8\001\002\000\036" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc" +
    "\055\uffcc\001\002\000\022\006\045\017\101\030\105\032" +
    "\075\051\102\052\100\053\106\055\054\001\002\000\044" +
    "\020\167\031\112\032\125\033\110\034\124\035\121\036" +
    "\132\037\127\040\133\041\130\042\120\043\123\044\131" +
    "\045\114\046\116\047\111\050\113\001\002\000\004\021" +
    "\044\001\002\000\026\003\uffba\005\uffba\006\uffba\010\uffba" +
    "\012\uffba\014\uffba\016\uffba\021\uffba\022\uffba\055\uffba\001" +
    "\002\000\026\003\177\005\057\006\045\010\047\012\055" +
    "\014\053\016\051\021\044\022\200\055\054\001\002\000" +
    "\004\055\070\001\002\000\036\003\uffc9\004\uffc9\005\uffc9" +
    "\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\022\uffc9\055\uffc9\001\002\000\036" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd" +
    "\055\uffcd\001\002\000\006\026\071\027\176\001\002\000" +
    "\032\003\uffc5\004\uffc5\005\uffc5\006\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\016\uffc5\021\uffc5\022\uffc5\055\uffc5\001" +
    "\002\000\036\003\uffc7\004\uffc7\005\uffc7\006\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\022\uffc7\055\uffc7\001\002\000\036\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\055\uffcb\001\002" +
    "\000\026\003\uffb6\005\uffb6\006\uffb6\010\uffb6\012\uffb6\014" +
    "\uffb6\016\uffb6\021\uffb6\022\uffb6\055\uffb6\001\002\000\022" +
    "\006\045\017\101\030\105\032\075\051\102\052\100\053" +
    "\106\055\054\001\002\000\044\027\204\031\112\032\125" +
    "\033\110\034\124\035\121\036\132\037\127\040\133\041" +
    "\130\042\120\043\123\044\131\045\114\046\116\047\111" +
    "\050\113\001\002\000\026\003\uffbe\005\uffbe\006\uffbe\010" +
    "\uffbe\012\uffbe\014\uffbe\016\uffbe\021\uffbe\022\uffbe\055\uffbe" +
    "\001\002\000\004\054\206\001\002\000\006\020\210\026" +
    "\207\001\002\000\024\006\045\017\101\030\105\032\075" +
    "\051\102\052\100\053\106\054\212\055\054\001\002\000" +
    "\052\020\uffb2\024\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\001\002\000\046\020\uffae\026\uffae\031\112\032" +
    "\125\033\110\034\124\035\121\036\132\037\127\040\133" +
    "\041\130\042\120\043\123\044\131\045\114\046\116\047" +
    "\111\050\113\001\002\000\006\020\uffad\026\uffad\001\002" +
    "\000\006\020\uffb0\026\uffb0\001\002\000\006\020\216\026" +
    "\215\001\002\000\024\006\045\017\101\030\105\032\075" +
    "\051\102\052\100\053\106\054\212\055\054\001\002\000" +
    "\052\020\uffb1\024\uffb1\026\uffb1\027\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\001\002\000\006\020\uffaf\026\uffaf\001\002\000" +
    "\010\003\uffd2\020\uffd2\026\uffd2\001\002\000\010\003\uffd3" +
    "\020\uffd3\026\uffd3\001\002\000\014\003\uffe0\004\uffe0\013" +
    "\uffe0\015\uffe0\022\uffe0\001\002\000\010\003\uffd0\020\uffd0" +
    "\026\uffd0\001\002\000\010\003\uffcf\020\uffcf\026\uffcf\001" +
    "\002\000\010\003\uffd1\020\uffd1\026\uffd1\001\002\000\014" +
    "\003\uffde\004\uffde\013\uffde\015\uffde\022\uffde\001\002\000" +
    "\004\017\230\001\002\000\012\003\231\004\015\013\014" +
    "\020\232\001\002\000\006\021\044\055\223\001\002\000" +
    "\006\003\241\021\044\001\002\000\010\003\234\020\235" +
    "\026\040\001\002\000\012\003\034\004\015\013\014\021" +
    "\044\001\002\000\006\003\236\021\044\001\002\000\014" +
    "\003\uffd6\004\uffd6\013\uffd6\015\uffd6\022\uffd6\001\002\000" +
    "\014\003\uffe2\004\uffe2\013\uffe2\015\uffe2\022\uffe2\001\002" +
    "\000\014\003\uffda\004\uffda\013\uffda\015\uffda\022\uffda\001" +
    "\002\000\014\003\uffd8\004\uffd8\013\uffd8\015\uffd8\022\uffd8" +
    "\001\002\000\014\003\uffe4\004\uffe4\013\uffe4\015\uffe4\022" +
    "\uffe4\001\002\000\014\003\uffdc\004\uffdc\013\uffdc\015\uffdc" +
    "\022\uffdc\001\002\000\010\003\uffee\026\uffee\027\uffee\001" +
    "\002\000\014\003\uffeb\017\032\023\254\026\uffeb\027\uffeb" +
    "\001\002\000\010\003\251\026\247\027\250\001\002\000" +
    "\006\003\263\055\253\001\002\000\014\003\ufff2\004\ufff2" +
    "\013\ufff2\015\ufff2\022\ufff2\001\002\000\004\055\253\001" +
    "\002\000\010\003\uffed\026\uffed\027\uffed\001\002\000\012" +
    "\003\uffeb\023\254\026\uffeb\027\uffeb\001\002\000\006\003" +
    "\255\051\256\001\002\000\012\003\uffe9\024\261\026\uffe9" +
    "\027\uffe9\001\002\000\006\003\260\024\257\001\002\000" +
    "\010\003\uffea\026\uffea\027\uffea\001\002\000\010\003\uffe8" +
    "\026\uffe8\027\uffe8\001\002\000\010\003\uffe7\026\uffe7\027" +
    "\uffe7\001\002\000\010\003\uffef\026\uffef\027\uffef\001\002" +
    "\000\010\003\uffec\026\uffec\027\uffec\001\002\000\006\002" +
    "\ufff8\055\245\001\002\000\004\002\uffff\001\002\000\014" +
    "\003\ufff5\004\ufff5\013\ufff5\015\ufff5\022\ufff5\001\002\000" +
    "\014\003\271\004\015\013\014\015\016\022\270\001\002" +
    "\000\004\002\ufffd\001\002\000\006\002\ufff6\055\031\001" +
    "\002\000\014\003\uffdd\004\uffdd\013\uffdd\015\uffdd\022\uffdd" +
    "\001\002\000\004\017\274\001\002\000\012\003\275\004" +
    "\015\013\014\020\277\001\002\000\006\021\044\055\223" +
    "\001\002\000\010\003\302\020\303\026\040\001\002\000" +
    "\006\003\300\021\044\001\002\000\014\003\uffd7\004\uffd7" +
    "\013\uffd7\015\uffd7\022\uffd7\001\002\000\014\003\uffe3\004" +
    "\uffe3\013\uffe3\015\uffe3\022\uffe3\001\002\000\012\003\034" +
    "\004\015\013\014\021\044\001\002\000\006\003\304\021" +
    "\044\001\002\000\014\003\uffd5\004\uffd5\013\uffd5\015\uffd5" +
    "\022\uffd5\001\002\000\014\003\uffe1\004\uffe1\013\uffe1\015" +
    "\uffe1\022\uffe1\001\002\000\014\003\uffd9\004\uffd9\013\uffd9" +
    "\015\uffd9\022\uffd9\001\002\000\014\003\uffdb\004\uffdb\013" +
    "\uffdb\015\uffdb\022\uffdb\001\002\000\016\003\uffde\004\uffde" +
    "\013\uffde\015\uffde\022\uffde\027\315\001\002\000\014\003" +
    "\uffeb\017\230\023\254\026\uffeb\027\uffeb\001\002\000\010" +
    "\003\314\026\247\027\313\001\002\000\014\003\ufff3\004" +
    "\ufff3\013\ufff3\015\ufff3\022\ufff3\001\002\000\016\003\ufff1" +
    "\004\ufff1\013\ufff1\015\ufff1\022\ufff1\055\253\001\002\000" +
    "\014\003\ufff0\004\ufff0\013\ufff0\015\ufff0\022\ufff0\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\016\005\022\010" +
    "\023\011\021\021\012\001\001\000\006\006\311\007\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\265\010\266\011\021\021\012\001\001" +
    "\000\006\006\245\007\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\027\021\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\036" +
    "\013\035\021\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\220\021\032\001\001\000\006\013" +
    "\217\021\032\001\001\000\004\020\042\001\001\000\002" +
    "\001\001\000\020\014\047\016\051\017\062\020\057\021" +
    "\055\022\061\023\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\170\017\062\020" +
    "\057\021\171\022\061\023\045\001\001\000\002\001\001" +
    "\000\012\017\161\020\057\022\061\023\045\001\001\000" +
    "\012\022\103\023\102\025\157\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\103\023\102\025\075\030\076\001\001\000\012" +
    "\022\103\023\102\025\143\030\076\001\001\000\014\031" +
    "\125\032\121\033\133\034\116\035\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\103\023\102\025" +
    "\135\030\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\103\023\102\025\106\030" +
    "\076\001\001\000\002\001\001\000\014\031\125\032\121" +
    "\033\133\034\116\035\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\103\023\102\025\134\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\125" +
    "\032\121\033\133\034\116\035\114\001\001\000\014\031" +
    "\125\032\121\033\133\034\116\035\114\001\001\000\002" +
    "\001\001\000\004\020\140\001\001\000\002\001\001\000" +
    "\004\020\142\001\001\000\002\001\001\000\014\031\125" +
    "\032\121\033\133\034\116\035\114\001\001\000\014\022" +
    "\103\023\102\024\152\025\151\030\076\001\001\000\012" +
    "\022\103\023\102\025\146\030\076\001\001\000\014\031" +
    "\125\032\121\033\133\034\116\035\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\125\032\121\033" +
    "\133\034\116\035\114\001\001\000\002\001\001\000\012" +
    "\022\103\023\102\025\155\030\076\001\001\000\002\001" +
    "\001\000\014\031\125\032\121\033\133\034\116\035\114" +
    "\001\001\000\002\001\001\000\014\031\125\032\121\033" +
    "\133\034\116\035\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\103\023\102\025\165\030\076\001\001\000\014\031\125" +
    "\032\121\033\133\034\116\035\114\001\001\000\004\020" +
    "\167\001\001\000\002\001\001\000\012\017\161\020\057" +
    "\022\061\023\045\001\001\000\004\015\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\103\023\102\025\202\030\076\001\001" +
    "\000\014\031\125\032\121\033\133\034\116\035\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\103\023\102\025\210\026\213\027\212\030" +
    "\076\001\001\000\002\001\001\000\014\031\125\032\121" +
    "\033\133\034\116\035\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\103\023\102" +
    "\025\210\027\216\030\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\232" +
    "\013\035\021\032\001\001\000\004\020\242\001\001\000" +
    "\004\020\241\001\001\000\002\001\001\000\010\013\217" +
    "\020\237\021\032\001\001\000\004\020\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\261" +
    "\001\001\000\002\001\001\000\004\007\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\245\007\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\027\021\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\275\013\035\021\032\001\001\000\004" +
    "\020\306\001\001\000\002\001\001\000\004\020\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\217" +
    "\020\305\021\032\001\001\000\004\020\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\251\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DecafParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DecafParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DecafParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*
public void report_error(String message, Object info) {
	if(message.equals("Syntax error")) {
		System.out.println(((Symbol)info).left);
	}
	else if(message.equals("Couldn't repair and continue parse")) {
		System.err.println("Missing syntax: " + ((Symbol)info).right);
	}

}
*/


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DecafParser$actions {
  private final DecafParser parser;

  /** Constructor */
  CUP$DecafParser$actions(DecafParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DecafParser$do_action(
    int                        CUP$DecafParser$act_num,
    java_cup.runtime.lr_parser CUP$DecafParser$parser,
    java.util.Stack            CUP$DecafParser$stack,
    int                        CUP$DecafParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DecafParser$result;

      /* select the action based on the action number */
      switch (CUP$DecafParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Literal ::= CHAR_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Literal ::= INT_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondOp ::= OR 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*CondOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondOp ::= AND 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*CondOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EqOp ::= NOT_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EqOp ::= EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RelOp ::= GREATER_OR_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RelOp ::= LESSER_OR_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // RelOp ::= LESSER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ArithOp ::= BITWISE_ROTATE_RIGHT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ArithOp ::= ARITHMETIC_SHIFT_RIGHT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ArithOp ::= ARITHMETIC_SHIFT_LEFT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ArithOp ::= MODULO 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ArithOp ::= DIVIDE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ArithOp ::= TIMES 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ArithOp ::= MINUS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ArithOp ::= PLUS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BinOp ::= CondOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // BinOp ::= EqOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BinOp ::= RelOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BinOp ::= ArithOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= NOT Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= MINUS Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr BinOp Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Literal 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= MethodCall 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Location 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exprs ::= Exprs COMMA Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exprs ::= Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Location ::= IDENTIFIER LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Location ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CalloutArg ::= STRING_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CalloutArg ::= Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CalloutArgs ::= CalloutArgs COMMA CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CalloutArgs ::= CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArgs RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS Exprs RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Statement ::= CONTINUE SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Statement ::= BREAK SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Statement ::= RETURN Expr SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Statement ::= RETURN SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Statement ::= WHILE LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block ELSE Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= MethodCall SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= Location ASSIGN Expr SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Statements ::= Statements Statement 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Type ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IdentifierList ::= IdentifierList COMMA IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IdentifierList ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VariableDeclarations ::= VariableDeclarations Type IdentifierList SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VariableDeclarations ::= Type IdentifierList SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Block ::= LEFT_BRACE VariableDeclarations Statements error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Block ::= LEFT_BRACE Statements error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Block ::= LEFT_BRACE VariableDeclarations error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Block ::= LEFT_BRACE error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Block ::= LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Block ::= LEFT_BRACE Statements RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Block ::= LEFT_BRACE VariableDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Block ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ParameterDeclaration ::= Type error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ParameterDeclaration ::= error IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ParameterDeclaration ::= Type IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ParameterDeclarations ::= ParameterDeclarations error ParameterDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ParameterDeclarations ::= ParameterDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations error Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations error Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS error Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS error Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclaration ::= VOID error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodDeclaration ::= Type error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodDeclaration ::= error IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclaration ::= error IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclarations ::= MethodDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDeclarations ::= MethodDeclarations MethodDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Field ::= IDENTIFIER LEFT_BRACKET error RIGHT_BRACKET 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Field ::= IDENTIFIER LEFT_BRACKET error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Field ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Fields ::= Fields COMMA error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Fields ::= Fields error Field 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Fields ::= Field 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Fields ::= Fields COMMA Field 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FieldDeclaration ::= Type error SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FieldDeclaration ::= Type Fields error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FieldDeclaration ::= error Fields SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FieldDeclaration ::= Type Fields SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldDeclarations ::= FieldDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= CLASS IDENTIFIER LEFT_BRACE error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= CLASS IDENTIFIER error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= CLASS error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= error 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		RESULT = start_val;
              CUP$DecafParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DecafParser$parser.done_parsing();
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

