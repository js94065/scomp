package scomp;

import java.util.*;
import java.util.logging.*;

import java_cup.runtime.*;

import scomp.ir.*;

parser code
{:
	
	private final Logger logger = Logger.getLogger(DecafParser.class.getName());
	
	private List<String> errors = new ArrayList<String>();
	
	/**
	 * @return
	 * <br>Not null
	 * <br>Shared
	 */
	public final List<String> getErrors() {
		return this.errors;
	}
	
	/**
	 * @param message
	 * <br>Maybe null
	 */
	public final void logError(final String message) {
		this.getErrors().add(message);
		this.logger.log(Level.SEVERE, message);
	}
	
	/**
	 * @return
	 * <br>Range: any boolean
	 */
	public final boolean hasErrors() {
		return !this.getErrors().isEmpty();
	}
	
	/**
	 * @return
	 * <br>Maybe null
	 * <br>Shared
	 */
	public final Symbol getStackTop() {
		return (Symbol) this.stack.peek();
	}
	
	@Override
	public final void report_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void report_fatal_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void syntax_error(final Symbol currentToken) {
		final Yylex scanner = (Yylex) this.getScanner();
		
		scanner.updateLocation();
		
		int row = scanner.getCurrentRow();
		int column = scanner.getCurrentColumn();
		String errorMessage = "Parse error";
		
		for (final Object symbol : this.stack) {
			switch (((Symbol) symbol).sym) {
			case DecafParserSymbols.LEFT_PARENTHESIS:
				errorMessage = "Missing \")\"";
				break;
			case DecafParserSymbols.LEFT_BRACE:
				errorMessage = "Missing \"}\"";
				break;
			case DecafParserSymbols.LEFT_BRACKET:
				errorMessage = "Missing \"]\"";
				break;
			default:
				break;
			}
		}
		
		final DecafToken token = Tools.cast(DecafToken.class, currentToken);
		
		if (token != null) {
			row = token.getRow();
			column = token.getColumn();
			
			errorMessage = "Unexpected \"" + token.getInputString() + "\"";
		}
		
		this.logError("(:" + row + ":" + column + ") " + errorMessage);
	}
	
	@Override
	public final void unrecovered_syntax_error(final Symbol currentToken) throws Exception {
		throw new RuntimeException(this.getErrors().toString());
	}
	
:}

action code
{:
	
	/**
	 * @return
	 * <br>Not null
	 * <br>Shared
	 */
	public final DecafParser getParser() {
		return this.parser;
	}
	
	/**
	 * @return
	 * <br>Maybe null
	 * <br>Shared
	 */
	public final Symbol getStackTop() {
		return this.getParser().getStackTop();
	}
	
	/**
	 * @param message
	 * <br>Maybe null
	 */
	public final void logError(final String message) {
		this.getParser().logError(message);
	}
	
	/**
	 * @param program
	 * <br>Maybe null
	 * @return {@code program} or {@code null} if there was an error
	 * <br>Maybe null
	 */
	public final Program nullIfErrors(final Program program) {
		return this.getParser().hasErrors() ? null : program;
	}
	
:}

terminal BOOLEAN, BREAK, CALLOUT, CLASS, CONTINUE, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET;
terminal ASSIGN; // "=", not to be confused with "=="  which is EQUAL
terminal COMMA, SEMICOLON;
terminal String NOT, PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal String ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
terminal String LESS, GREATER, LESS_OR_EQUAL, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL, AND, OR;
terminal String INT_LITERAL;
terminal Boolean BOOLEAN_LITERAL;
terminal Character CHAR_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;

non terminal Program Program;
non terminal List FieldDeclarations;
non terminal List FieldDeclaration;
non terminal List Fields;
non terminal Object[] Field;
non terminal List MethodDeclarations;
non terminal MethodDeclaration MethodDeclaration;
non terminal List ParameterDeclarations;
non terminal ParameterDeclaration ParameterDeclaration;
non terminal List VariableDeclarations;
non terminal List IdentifierList;
non terminal List Statements;
non terminal AbstractStatement Statement;
non terminal Block Block;
non terminal Class Type;
non terminal AbstractMethodCall MethodCall;
non terminal AbstractLocation Location;
non terminal List Expressions;
non terminal AbstractExpression Expression;
non terminal AbstractCalloutArgument CalloutArgument;
non terminal List CalloutArguments;
non terminal AbstractLiteral Literal;

precedence left OR;
precedence left AND;
precedence nonassoc EQUAL, NOT_EQUAL;
precedence left LESS, GREATER, LESS_OR_EQUAL, GREATER_OR_EQUAL;
precedence left ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence left NOT;

Program ::=
	CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE
	{:
		RESULT = this.nullIfErrors(new Program(null, null, (DecafToken) this.getStackTop()));
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations RIGHT_BRACE
	{:
		RESULT = this.nullIfErrors(new Program(fieldDeclarations, null, (DecafToken) this.getStackTop()));
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = this.nullIfErrors(new Program(null, methodDeclarations, (DecafToken) this.getStackTop()));
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = this.nullIfErrors(new Program(fieldDeclarations, methodDeclarations, (DecafToken) this.getStackTop()));
	:}
	;

FieldDeclarations ::=
	FieldDeclarations:fieldDeclarations FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclarations);
		
		RESULT.addAll(fieldDeclaration);
	:}
	|
	FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclaration);
	:}
	;

FieldDeclaration ::=
	Type:type Fields:fields SEMICOLON
	{:
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object[] field : (List<Object[]>) fields) {
			switch (field.length) {
			case 1:
				RESULT.add(new FieldDeclaration(type, (DecafToken) field[0]));
				break;
			case 2:
				RESULT.add(new ArrayFieldDeclaration(type, (DecafToken) field[0], (IntLiteral) field[1]));
				break;
			default:
				throw new IllegalArgumentException("" + Arrays.toString(field));
			}
		}
	:}
	;

Fields ::=
	Fields:fields COMMA Field:field
	{:
		RESULT = new ArrayList<Object[]>(fields);
		
		RESULT.add(field);
	:}
	|
	Field:field
	{:
		RESULT = new ArrayList<Object[]>();
		
		RESULT.add(field);
	:}
	;

Field ::=
	IDENTIFIER
	{:
		RESULT = new Object[] { CUP$DecafParser$stack.get(CUP$DecafParser$top - 0) };
	:}
	|
	IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET
	{:
		RESULT = new Object[] {
				CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				new IntLiteral((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1))
		};
	:}
	;

MethodDeclarations ::=
	MethodDeclarations:methodDeclarations MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>(methodDeclarations);
		
		RESULT.add(methodDeclaration);
	:}
	|
	MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>();
		
		RESULT.add(methodDeclaration);
	:}
	;

MethodDeclaration ::=
	Type:type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(
				type,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				null,
				block);
	:}
	|
	VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(
				void.class,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				null,
				block);
	:}
	|
	Type:type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations:parameterDeclarations RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(
				type,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4),
				parameterDeclarations,
				block);
	:}
	|
	VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations:parameterDeclarations RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new MethodDeclaration(
				void.class,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4),
				parameterDeclarations,
				block);
	:}
	;
	
ParameterDeclarations ::= 
	ParameterDeclaration:parameterDeclaration
	{:
		RESULT = new ArrayList<ParameterDeclaration>();
		
		RESULT.add(parameterDeclaration);
	:}
	|
	ParameterDeclarations:parameterDeclarations COMMA ParameterDeclaration:parameterDeclaration
	{:
		RESULT = new ArrayList<ParameterDeclaration>(parameterDeclarations);
		
		RESULT.add(parameterDeclaration);
	:}
	;
	
ParameterDeclaration ::=
	Type:type IDENTIFIER
	{:
		RESULT = new ParameterDeclaration(type, (DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	:}
	;

Block ::=
	LEFT_BRACE RIGHT_BRACE
	{:
		RESULT = new Block((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1), null, null);
	:}
	|
	LEFT_BRACE VariableDeclarations:variableDeclarations RIGHT_BRACE
	{:
		RESULT = new Block((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 2), variableDeclarations, null);
	:}
	|
	LEFT_BRACE Statements:statements RIGHT_BRACE
	{:
		RESULT = new Block((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 2), null, statements);
	:}
	|
	LEFT_BRACE VariableDeclarations:variableDeclarations Statements:statements RIGHT_BRACE
	{:
		RESULT = new Block((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), variableDeclarations, statements);
	:}
	;
	
VariableDeclarations ::=
	Type:type IdentifierList:identifierList SEMICOLON
	{:
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final DecafToken identifier : (List<DecafToken>) identifierList) {
			RESULT.add(new VariableDeclaration(type, identifier));
		}

	:}
	|
	VariableDeclarations:variableDeclarations Type:type IdentifierList:identifierList SEMICOLON
	{:
		RESULT = new ArrayList<VariableDeclaration>(variableDeclarations);
		
		for (final DecafToken identifier : (List<DecafToken>) identifierList) {
			RESULT.add(new VariableDeclaration(type, identifier));
		}
		
	:}
	;
	
IdentifierList  ::=
	IDENTIFIER
	{:
		RESULT = new ArrayList<DecafToken>();
		
		RESULT.add((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	:}
	|
	IdentifierList:identifierList COMMA IDENTIFIER
	{:
		RESULT = new ArrayList<DecafToken>(identifierList);
		
		RESULT.add((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	:}
	;

Type ::=
	INT
	{:
		RESULT = int.class;
	:}
	|
	BOOLEAN
	{:
		RESULT = boolean.class;
	:}
	;
	
Statements ::=
	Statement:statement
	{:
		RESULT = new ArrayList<AbstractStatement>();
		
		RESULT.add(statement);
	:}
	|
	Statements:statements Statement:statement
	{:
		RESULT = new ArrayList<AbstractStatement>(statements);
		
		RESULT.add(statement);
	:}
	;

Statement ::=
	Location:location ASSIGN Expression:expression SEMICOLON
	{:
		RESULT = new AssignmentStatement(location, expression);
	:}
	|
	MethodCall:methodCall SEMICOLON
	{:
		RESULT = new MethodCallStatement(methodCall);
	:}
	|
	IF LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new IfStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4), expression, block, null);
	:}
	|
	IF LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:thenBlock ELSE Block:elseBlock
	{:
		RESULT = new IfStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 6), expression, thenBlock, elseBlock);
	:}
	|
	WHILE LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new WhileStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4), expression, block);
	:}
	|
	RETURN SEMICOLON
	{:
		RESULT = new ReturnStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1), null);
	:}
	|
	RETURN Expression:expression SEMICOLON
	{:
		RESULT = new ReturnStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 2), expression);
	:}
	|
	BREAK SEMICOLON
	{:
		RESULT = new BreakStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1));
	:}
	|
	CONTINUE SEMICOLON
	{:
		RESULT = new ContinueStatement((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1));
	:}
	|
	Block:block
	{:
		RESULT = new BlockStatement(block);
	:}
	;
	
MethodCall ::= 
	IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCall((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 2), null);
	:}
	|
	IDENTIFIER LEFT_PARENTHESIS Expressions:expressions RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCall((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), expressions);
	:}
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCallout((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1), null);
	:}
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArguments:calloutArguments RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCallout((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), calloutArguments);
	:}
	;

CalloutArguments ::=
	CalloutArgument:calloutArgument
	{:
		RESULT = new ArrayList<AbstractCalloutArgument>();
		
		RESULT.add(calloutArgument);
	:}
	|
	CalloutArguments:calloutArguments COMMA CalloutArgument:calloutArgument
	{:
		RESULT = new ArrayList<AbstractCalloutArgument>(calloutArguments);
		
		RESULT.add(calloutArgument);
	:}
	;
	
CalloutArgument ::=
	Expression:expression
	{:
		RESULT = new ExpressionCalloutArgument(expression);
	:}
	|
	STRING_LITERAL
	{:
		RESULT = new StringCalloutArgument((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	:}
	;

Location ::=
	IDENTIFIER
	{:
		RESULT = new IdentifierLocation((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	:}
	|
	IDENTIFIER LEFT_BRACKET Expression:expression RIGHT_BRACKET
	{:
		RESULT = new ArrayLocation((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), expression);
	:}
	;

Expressions ::=
	Expression:expression
	{:
		RESULT = new ArrayList<AbstractExpression>();
		
		RESULT.add(expression);
	:}
	|
	Expressions:expressions COMMA Expression:expression
	{:
		RESULT = new ArrayList<AbstractExpression>(expressions);
		
		RESULT.add(expression);
	:}
	;

Expression ::=
	Location:location
	{:
		RESULT = new LocationExpression(location);
	:}
	|
	MethodCall:methodCall
	{:
		RESULT = new MethodCallExpression(methodCall);
	:}
	|
	Literal:literal
	{:
		RESULT = new LiteralExpression(literal);
	:}
	|
	Expression:left PLUS Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left MINUS Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left TIMES Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left DIVIDE Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left MODULO Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left ARITHMETIC_SHIFT_LEFT Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left ARITHMETIC_SHIFT_RIGHT Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left BITWISE_ROTATE_RIGHT Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left LESS Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left GREATER Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left LESS_OR_EQUAL Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left GREATER_OR_EQUAL Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left EQUAL Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left NOT_EQUAL Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left AND Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	Expression:left OR Expression:right
	{:
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	:}
	|
	MINUS Expression:expression
	{:
		RESULT = new MinusExpression((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1), expression);
	:}
	|
	NOT Expression:expression
	{:
		RESULT = new NegationExpression((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1), expression);
	:}
	|
	LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS
	{:
		RESULT = expression;
	:}
	;

Literal ::=
	INT_LITERAL
	{:
		RESULT = new IntLiteral((DecafToken) this.getStackTop());
	:}
	|
	BOOLEAN_LITERAL:value
	{:
		RESULT = new BooleanLiteral((DecafToken) this.getStackTop());
	:}
	|
	CHAR_LITERAL:value
	{:
		RESULT = new CharLiteral((DecafToken) this.getStackTop());
	:}
	;
