package scomp;

import java.util.*;

import java_cup.runtime.*;


parser code 
{:


public void report_error(String message, Object info) {

	if(message.equals("Syntax error")) {
		
		if(((Symbol)info).sym == 0) {
			System.err.println(((Symbol)info).sym);
		}
		else {
			System.err.println("Syntax Error '" + ((DecafToken)(info)).getInputString() + 
			"' at (" + ((DecafToken)info).getRow() + "," + ((DecafToken)info).getColumn() + ")");
		}
		
	}
}

:}

terminal BOOLEAN, BREAK, CALLOUT, CLASS, CONTINUE, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET;
terminal ASSIGN; // "=", not to be confused with "=="  which is EQUAL
terminal COMMA, SEMI_COLON, NOT, PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
terminal LESSER, GREATER, LESSER_OR_EQUAL, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL, AND, OR;
terminal INT_LITERAL;
terminal BOOLEAN_LITERAL;
terminal CHAR_LITERAL;
terminal STRING_LITERAL;
terminal IDENTIFIER;

non terminal Program Program;
non terminal List FieldDeclarations;
non terminal FieldDeclaration FieldDeclaration;
non terminal Fields, Field;
non terminal List MethodDeclarations;
non terminal MethodDeclaration MethodDeclaration;
non terminal ParameterDeclarations, ParameterDeclaration;
non terminal VariableDeclarations, IdentifierList;
non terminal Statements, Statement;
non terminal Block;
non terminal Type;
non terminal MethodCall;
non terminal Location;
non terminal Exprs, Expr;
non terminal CalloutArgs, CalloutArg;
non terminal Literal;
non terminal BinOp, ArithOp, RelOp, EqOp, CondOp;

precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LESSER, GREATER, LESSER_OR_EQUAL, GREATER_OR_EQUAL;
precedence left ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence left NOT;

Program ::=
	CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE
	{:
		RESULT = new Program(null, null);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(fieldDeclarations, null);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(null, methodDeclarations);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(fieldDeclarations, methodDeclarations);
	:}
	|
	// Missing code
	{:
		final Yylex scanner = Tools.cast(Yylex.class, this.parser.getScanner());
		
		if (scanner != null) {
			throw new RuntimeException("(:" + scanner.getCurrentRow() + ":" + scanner.getCurrentColumn() + ") Parse error");
		}
	:}
	|
	CLASS // Missing "Program" identifier
	{:
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Parse error");
		}
	:}
	|
	CLASS IDENTIFIER error // missing LEFT_BRACE
	|
	// missing RIGHT_BRACE 
	CLASS IDENTIFIER LEFT_BRACE error 
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations error
	|
	CLASS IDENTIFIER LEFT_BRACE MethodDeclarations error
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations error 
	;

FieldDeclarations ::=
	FieldDeclarations:fieldDeclarations FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<Object>(fieldDeclarations);
		RESULT.add(fieldDeclaration);
	:}
	|
	FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<Object>();
		RESULT.add(fieldDeclaration);
	:}
	;

FieldDeclaration ::=
	Type Fields SEMI_COLON
	;

Fields ::=
	Fields COMMA Field
	|
	Field
	/*|
	Fields COMMA error // missing Field
	|
	error COMMA Field // missing Fields
	|
	error Field // missing COMMA
	*/
	;

Field ::=
	IDENTIFIER
	|
	IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET
	|
	error LEFT_BRACKET INT_LITERAL RIGHT_BRACKET // missing IDENTIFIER
	|
	IDENTIFIER error INT_LITERAL RIGHT_BRACKET // missing LEFT_BRACKET
	|
	IDENTIFIER LEFT_BRACKET error RIGHT_BRACKET // missing INT_LITERAL
	|
	IDENTIFIER LEFT_BRACKET INT_LITERAL error // missing RIGHT_BRACKET
	;

MethodDeclarations ::=
	MethodDeclarations:methodDeclarations MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>(methodDeclarations);
		RESULT.add(methodDeclaration);
	:}
	|
	MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>();
		RESULT.add(methodDeclaration);
	:}
	;

MethodDeclaration ::=
	Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block
	|
	Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block
	/*|
	// missing Type or VOID
	error IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
	|
	error IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	// missing IDENTIFIER
	Type error LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
	|
	VOID error LEFT_PARENTHESIS RIGHT_PARENTHESIS Block
	|
	Type error LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	VOID error LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	// missing LEFT_PARENTHESIS
	Type IDENTIFIER error RIGHT_PARENTHESIS Block
	|
	VOID IDENTIFIER error RIGHT_PARENTHESIS Block
	|
	Type IDENTIFIER error ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	VOID IDENTIFIER error ParameterDeclarations RIGHT_PARENTHESIS Block
	|
	// missing RIGHT_PARENTHESIS
	Type IDENTIFIER LEFT_PARENTHESIS error Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS error Block
	|
	Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations error Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations error Block
	|
	// missing Block
	Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS error
	|
	VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS error
	|
	Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS error
	|
	VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS error
	*/
	;
	
ParameterDeclarations ::= 
	ParameterDeclaration
	|
	ParameterDeclarations COMMA ParameterDeclaration
	/*
	|
	ParameterDeclarations COMMA error // missing ParameterDeclaration
	|
	error COMMA ParameterDeclaration // missing ParameterDeclarations
	|
	error ParameterDeclaration // missing COMMA
	*/
	;
	
ParameterDeclaration ::=
	Type IDENTIFIER
	/*
	|
	Type error // missing IDENTIFIER
	|
	error IDENTIFIER // missing Type
	*/
	;

Block ::=
	LEFT_BRACE RIGHT_BRACE
	|
	LEFT_BRACE VariableDeclarations RIGHT_BRACE
	|
	LEFT_BRACE Statements RIGHT_BRACE
	|
	LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE
	/*|
	// missing LEFT_BRACE
	error RIGHT_BRACE
	|
	error VariableDeclarations RIGHT_BRACE
	|
	error Statements RIGHT_BRACE
	|
	error VariableDeclarations Statements RIGHT_BRACE
	|
	// missing RIGHT_BRACE
	LEFT_BRACE error
	|
	LEFT_BRACE VariableDeclarations error
	|
	LEFT_BRACE Statements error
	|
	LEFT_BRACE VariableDeclarations Statements error
	*/
	;
	
VariableDeclarations ::=
	Type IdentifierList SEMI_COLON
	|
	VariableDeclarations Type IdentifierList SEMI_COLON
	;
	
IdentifierList  ::=
	IDENTIFIER
	|
	IdentifierList COMMA IDENTIFIER  
	;

Type ::=
	INT
	|
	BOOLEAN
	;
	
Statements ::=
	Statement
	|
	Statements Statement
	;

Statement ::=
	Location ASSIGN Expr SEMI_COLON
	|
	MethodCall SEMI_COLON
	|
	IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block
	|
	IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block ELSE Block
	|
	WHILE LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block
	|
	RETURN SEMI_COLON
	|
	RETURN Expr SEMI_COLON
	|
	BREAK SEMI_COLON
	|
	CONTINUE SEMI_COLON
	|
	Block
	;
	
MethodCall ::= 
	IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS
	|
	IDENTIFIER LEFT_PARENTHESIS Exprs RIGHT_PARENTHESIS
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArgs RIGHT_PARENTHESIS
	;

CalloutArgs ::=
	CalloutArg
	|
	CalloutArgs COMMA CalloutArg
	;
	
CalloutArg ::=
	Expr
	|
	STRING_LITERAL
	;

Location ::=
	IDENTIFIER
	|
	IDENTIFIER LEFT_BRACKET Expr RIGHT_BRACKET
	;
	
Exprs ::=
	Expr
	|
	Exprs COMMA Expr
	;
	
Expr ::=
	Location
	|
	MethodCall
	|
	Literal
	|
	Expr BinOp Expr
	|
	MINUS Expr
	|
	NOT Expr
	|
	LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
	;

BinOp ::=
	ArithOp
	|
	RelOp
	|
	EqOp
	|
	CondOp
	;

ArithOp ::=
	PLUS
	|
	MINUS
	|
	TIMES
	|
	DIVIDE
	|
	MODULO
	|
	ARITHMETIC_SHIFT_LEFT
	|
	ARITHMETIC_SHIFT_RIGHT
	|
	BITWISE_ROTATE_RIGHT
	;

RelOp ::=
	LESSER
	|
	GREATER
	|
	LESSER_OR_EQUAL
	|
	GREATER_OR_EQUAL
	;
	
EqOp ::=
	EQUAL
	|
	NOT_EQUAL
	;

CondOp ::=
	AND
	|
	OR
	;
	
Literal ::=
	INT_LITERAL
	|
	BOOLEAN_LITERAL
	|
	CHAR_LITERAL
	;

