
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jun 22 11:52:44 CEST 2010
//----------------------------------------------------

package scomp;

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue Jun 22 11:52:44 CEST 2010
  */
public class DecafParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DecafParser() {super();}

  /** Constructor which sets the default scanner. */
  public DecafParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\003\006\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\006\000\002" +
    "\010\004\000\002\010\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\010\000\002\011\010\000\002\012\003" +
    "\000\002\012\005\000\002\013\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\014\003\000\002\014\004\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\022\003\000\002\022\003" +
    "\000\002\017\003\000\002\017\004\000\002\020\006\000" +
    "\002\020\004\000\002\020\007\000\002\020\011\000\002" +
    "\020\007\000\002\020\004\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\003\000\002\023\005" +
    "\000\002\023\006\000\002\023\006\000\002\023\010\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\003\000\002\024\003\000\002\024\006\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\004\000\002\026\004\000" +
    "\002\026\005\000\002\031\003\000\002\031\003\000\002" +
    "\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\007\005\001\002\000\004\002\206\001" +
    "\002\000\004\055\006\001\002\000\004\021\007\001\002" +
    "\000\012\004\012\013\011\015\013\022\015\001\002\000" +
    "\004\055\175\001\002\000\004\055\uffe3\001\002\000\004" +
    "\055\uffe2\001\002\000\004\055\165\001\002\000\012\004" +
    "\012\013\011\015\013\022\162\001\002\000\004\002\001" +
    "\001\002\000\012\004\ufff4\013\ufff4\015\ufff4\022\ufff4\001" +
    "\002\000\012\004\ufffb\013\ufffb\015\ufffb\022\ufffb\001\002" +
    "\000\012\004\012\013\011\015\013\022\022\001\002\000" +
    "\004\055\024\001\002\000\004\002\ufffe\001\002\000\012" +
    "\004\ufff5\013\ufff5\015\ufff5\022\ufff5\001\002\000\004\017" +
    "\025\001\002\000\010\004\012\013\011\020\027\001\002" +
    "\000\004\055\160\001\002\000\004\021\035\001\002\000" +
    "\006\020\uffef\026\uffef\001\002\000\006\020\033\026\032" +
    "\001\002\000\006\004\012\013\011\001\002\000\004\021" +
    "\035\001\002\000\012\004\ufff1\013\ufff1\015\ufff1\022\ufff1" +
    "\001\002\000\030\004\012\005\051\006\036\010\040\012" +
    "\046\013\011\014\044\016\042\021\035\022\055\055\045" +
    "\001\002\000\004\017\143\001\002\000\004\045\140\001" +
    "\002\000\004\027\137\001\002\000\030\004\012\005\051" +
    "\006\036\010\040\012\046\013\011\014\044\016\042\021" +
    "\035\022\135\055\045\001\002\000\004\017\127\001\002" +
    "\000\024\005\051\006\036\010\040\012\046\014\044\016" +
    "\042\021\035\022\126\055\045\001\002\000\024\006\036" +
    "\017\071\027\122\030\077\032\066\051\073\052\072\053" +
    "\076\055\045\001\002\000\020\017\110\020\uffcd\023\111" +
    "\024\uffcd\026\uffcd\027\uffcd\045\uffcd\001\002\000\004\017" +
    "\065\001\002\000\004\055\061\001\002\000\030\004\uffe8" +
    "\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\021\uffe8\022\uffe8\055\uffe8\001\002\000\004\027\057" +
    "\001\002\000\024\005\uffd6\006\uffd6\010\uffd6\012\uffd6\014" +
    "\uffd6\016\uffd6\021\uffd6\022\uffd6\055\uffd6\001\002\000\004" +
    "\027\056\001\002\000\024\005\uffe1\006\uffe1\010\uffe1\012" +
    "\uffe1\014\uffe1\016\uffe1\021\uffe1\022\uffe1\055\uffe1\001\002" +
    "\000\034\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\021\uffec\022\uffec" +
    "\055\uffec\001\002\000\024\005\uffde\006\uffde\010\uffde\012" +
    "\uffde\014\uffde\016\uffde\021\uffde\022\uffde\055\uffde\001\002" +
    "\000\024\005\uffd8\006\uffd8\010\uffd8\012\uffd8\014\uffd8\016" +
    "\uffd8\021\uffd8\022\uffd8\055\uffd8\001\002\000\006\026\062" +
    "\027\063\001\002\000\006\026\uffe5\027\uffe5\001\002\000" +
    "\004\055\064\001\002\000\030\004\uffe6\005\uffe6\006\uffe6" +
    "\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6\022" +
    "\uffe6\055\uffe6\001\002\000\006\026\uffe4\027\uffe4\001\002" +
    "\000\022\006\036\017\071\030\077\032\066\051\073\052" +
    "\072\053\076\055\045\001\002\000\022\006\036\017\071" +
    "\030\077\032\066\051\073\052\072\053\076\055\045\001" +
    "\002\000\004\020\103\001\002\000\012\020\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\001\002\000\022\006\036\017\071\030" +
    "\077\032\066\051\073\052\072\053\076\055\045\001\002" +
    "\000\012\020\uffc2\024\uffc2\026\uffc2\027\uffc2\001\002\000" +
    "\012\020\uffc3\024\uffc3\026\uffc3\027\uffc3\001\002\000\012" +
    "\020\uffc9\024\uffc9\026\uffc9\027\uffc9\001\002\000\012\020" +
    "\uffc8\024\uffc8\026\uffc8\027\uffc8\001\002\000\012\020\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\001\002\000\022\006\036\017" +
    "\071\030\077\032\066\051\073\052\072\053\076\055\045" +
    "\001\002\000\012\020\uffc5\024\uffc5\026\uffc5\027\uffc5\001" +
    "\002\000\004\020\102\001\002\000\012\020\uffc4\024\uffc4" +
    "\026\uffc4\027\uffc4\001\002\000\004\021\035\001\002\000" +
    "\026\005\uffdd\006\uffdd\010\uffdd\011\105\012\uffdd\014\uffdd" +
    "\016\uffdd\021\uffdd\022\uffdd\055\uffdd\001\002\000\004\021" +
    "\035\001\002\000\024\005\uffdc\006\uffdc\010\uffdc\012\uffdc" +
    "\014\uffdc\016\uffdc\021\uffdc\022\uffdc\055\uffdc\001\002\000" +
    "\012\020\uffc6\024\uffc6\026\uffc6\027\uffc6\001\002\000\024" +
    "\006\036\017\071\020\114\030\077\032\066\051\073\052" +
    "\072\053\076\055\045\001\002\000\022\006\036\017\071" +
    "\030\077\032\066\051\073\052\072\053\076\055\045\001" +
    "\002\000\004\024\113\001\002\000\014\020\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\045\uffcc\001\002\000\012\020\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\001\002\000\006\020\uffcb\026\uffcb" +
    "\001\002\000\006\020\120\026\117\001\002\000\022\006" +
    "\036\017\071\030\077\032\066\051\073\052\072\053\076" +
    "\055\045\001\002\000\012\020\uffd4\024\uffd4\026\uffd4\027" +
    "\uffd4\001\002\000\006\020\uffca\026\uffca\001\002\000\024" +
    "\005\uffda\006\uffda\010\uffda\012\uffda\014\uffda\016\uffda\021" +
    "\uffda\022\uffda\055\uffda\001\002\000\004\027\124\001\002" +
    "\000\024\005\uffd9\006\uffd9\010\uffd9\012\uffd9\014\uffd9\016" +
    "\uffd9\021\uffd9\022\uffd9\055\uffd9\001\002\000\024\005\uffe0" +
    "\006\uffe0\010\uffe0\012\uffe0\014\uffe0\016\uffe0\021\uffe0\022" +
    "\uffe0\055\uffe0\001\002\000\034\004\uffea\005\uffea\006\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\021\uffea\022\uffea\055\uffea\001\002\000\022\006\036" +
    "\017\071\030\077\032\066\051\073\052\072\053\076\055" +
    "\045\001\002\000\004\020\131\001\002\000\004\021\035" +
    "\001\002\000\024\005\uffdb\006\uffdb\010\uffdb\012\uffdb\014" +
    "\uffdb\016\uffdb\021\uffdb\022\uffdb\055\uffdb\001\002\000\024" +
    "\005\051\006\036\010\040\012\046\014\044\016\042\021" +
    "\035\022\136\055\045\001\002\000\030\004\uffe7\005\uffe7" +
    "\006\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\021" +
    "\uffe7\022\uffe7\055\uffe7\001\002\000\034\004\uffeb\005\uffeb" +
    "\006\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\021\uffeb\022\uffeb\055\uffeb\001\002\000\034" +
    "\004\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9\055\uffe9" +
    "\001\002\000\024\005\uffd7\006\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\021\uffd7\022\uffd7\055\uffd7\001\002\000\022" +
    "\006\036\017\071\030\077\032\066\051\073\052\072\053" +
    "\076\055\045\001\002\000\004\027\142\001\002\000\024" +
    "\005\uffdf\006\uffdf\010\uffdf\012\uffdf\014\uffdf\016\uffdf\021" +
    "\uffdf\022\uffdf\055\uffdf\001\002\000\004\054\144\001\002" +
    "\000\006\020\146\026\145\001\002\000\024\006\036\017" +
    "\071\030\077\032\066\051\073\052\072\053\076\054\150" +
    "\055\045\001\002\000\012\020\uffd3\024\uffd3\026\uffd3\027" +
    "\uffd3\001\002\000\006\020\uffcf\026\uffcf\001\002\000\006" +
    "\020\uffce\026\uffce\001\002\000\006\020\uffd1\026\uffd1\001" +
    "\002\000\006\020\154\026\153\001\002\000\024\006\036" +
    "\017\071\030\077\032\066\051\073\052\072\053\076\054" +
    "\150\055\045\001\002\000\012\020\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\001\002\000\006\020\uffd0\026\uffd0\001\002\000" +
    "\006\020\uffee\026\uffee\001\002\000\012\004\ufff3\013\ufff3" +
    "\015\ufff3\022\ufff3\001\002\000\006\020\uffed\026\uffed\001" +
    "\002\000\012\004\012\013\011\015\013\022\164\001\002" +
    "\000\004\002\uffff\001\002\000\012\004\ufffc\013\ufffc\015" +
    "\ufffc\022\ufffc\001\002\000\004\002\ufffd\001\002\000\004" +
    "\017\166\001\002\000\010\004\012\013\011\020\167\001" +
    "\002\000\004\021\035\001\002\000\006\020\171\026\032" +
    "\001\002\000\004\021\035\001\002\000\012\004\ufff0\013" +
    "\ufff0\015\ufff0\022\ufff0\001\002\000\012\004\ufff2\013\ufff2" +
    "\015\ufff2\022\ufff2\001\002\000\006\026\ufff8\027\ufff8\001" +
    "\002\000\012\017\025\023\203\026\ufff7\027\ufff7\001\002" +
    "\000\006\026\177\027\200\001\002\000\004\055\202\001" +
    "\002\000\012\004\ufffa\013\ufffa\015\ufffa\022\ufffa\001\002" +
    "\000\006\026\ufff9\027\ufff9\001\002\000\010\023\203\026" +
    "\ufff7\027\ufff7\001\002\000\004\051\204\001\002\000\004" +
    "\024\205\001\002\000\006\026\ufff6\027\ufff6\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\013\005\016" +
    "\010\017\011\015\022\007\001\001\000\006\006\175\007" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\162\010\160\011\015\022\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\022\022\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\030\013\027\022\025\001\001\000\002\001\001\000" +
    "\004\021\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\155\022\025\001\001\000\004\021\033\001" +
    "\001\000\002\001\001\000\022\014\040\015\047\017\042" +
    "\020\053\021\051\022\046\023\052\024\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\133\017\132\020\053\021\051\022\046\023\052\024" +
    "\036\001\001\000\002\001\001\000\012\020\124\021\051" +
    "\023\052\024\036\001\001\000\012\023\074\024\073\026" +
    "\122\031\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\074\024\073\026" +
    "\066\031\067\001\001\000\012\023\074\024\073\026\106" +
    "\031\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\074\024\073\026\100\031\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\074\024\073\026\077" +
    "\031\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\103\001\001\000\002\001\001" +
    "\000\004\021\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\074\024\073\025\115\026\114\031\067" +
    "\001\001\000\012\023\074\024\073\026\111\031\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\074\024" +
    "\073\026\120\031\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\074" +
    "\024\073\026\127\031\067\001\001\000\002\001\001\000" +
    "\004\021\131\001\001\000\002\001\001\000\012\020\124" +
    "\021\051\023\052\024\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\074\024\073\026\140\031\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\074\024\073\026\146\027\151\030\150\031" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\074\024\073\026\146\030\154\031\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\022\022\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\167\013\027\022\025\001\001" +
    "\000\004\021\172\001\001\000\002\001\001\000\004\021" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DecafParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DecafParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DecafParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DecafParser$actions {
  private final DecafParser parser;

  /** Constructor */
  CUP$DecafParser$actions(DecafParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DecafParser$do_action(
    int                        CUP$DecafParser$act_num,
    java_cup.runtime.lr_parser CUP$DecafParser$parser,
    java.util.Stack            CUP$DecafParser$stack,
    int                        CUP$DecafParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DecafParser$result;

      /* select the action based on the action number */
      switch (CUP$DecafParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Literal ::= CHAR_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Literal ::= INT_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= NOT Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= MINUS Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Literal 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= MethodCall 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Location 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Exprs ::= Exprs COMMA Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exprs ::= Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Location ::= IDENTIFIER LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Location ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CalloutArg ::= STRING_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CalloutArg ::= Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CalloutArgs ::= CalloutArgs COMMA CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CalloutArgs ::= CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArgs RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS Exprs RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= CONTINUE SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= BREAK SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= RETURN Expr SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= RETURN SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= WHILE LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block ELSE Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= MethodCall SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= Location EQUAL Expr SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statements ::= Statements Statement 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statements ::= Statement 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VariableDeclaration ::= VariableDeclaration COMMA IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VariableDeclaration ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*VariableDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VariableDeclarations2 ::= Type VariableDeclaration SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*VariableDeclarations2*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableDeclarations ::= VariableDeclarations VariableDeclarations2 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableDeclarations ::= VariableDeclarations2 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= LEFT_BRACE Statements RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Block ::= LEFT_BRACE VariableDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Block ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParameterDeclaration ::= Type IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= ParameterDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclarations ::= MethodDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclarations ::= MethodDeclarations MethodDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Fields ::= Field 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Fields ::= Fields COMMA Field 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldDeclaration ::= Type Fields SEMI_COLON 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FieldDeclarations ::= FieldDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		RESULT = start_val;
              CUP$DecafParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DecafParser$parser.done_parsing();
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

