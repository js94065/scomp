
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Aug 02 22:07:52 CEST 2010
//----------------------------------------------------

package scomp;

import java.util.*;
import java.util.logging.*;
import java_cup.runtime.*;
import scomp.ir.*;

/** CUP v0.10k generated parser.
  * @version Mon Aug 02 22:07:52 CEST 2010
  */
public class DecafParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DecafParser() {super();}

  /** Constructor which sets the default scanner. */
  public DecafParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\003\006\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\006\000\002" +
    "\010\004\000\002\010\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\010\000\002\011\010\000\002\012\003" +
    "\000\002\012\005\000\002\013\004\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\006\000\002" +
    "\014\005\000\002\014\006\000\002\015\003\000\002\015" +
    "\005\000\002\021\003\000\002\021\003\000\002\016\003" +
    "\000\002\016\004\000\002\017\006\000\002\017\004\000" +
    "\002\017\007\000\002\017\011\000\002\017\007\000\002" +
    "\017\004\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\022\005\000\002\022\006" +
    "\000\002\022\006\000\002\022\010\000\002\027\003\000" +
    "\002\027\005\000\002\026\003\000\002\026\003\000\002" +
    "\023\003\000\002\023\006\000\002\024\003\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\025\004\000\002\025\005\000\002" +
    "\030\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\007\005\001\002\000\004\002\247\001" +
    "\002\000\004\055\006\001\002\000\004\021\007\001\002" +
    "\000\012\004\012\013\011\015\013\022\015\001\002\000" +
    "\004\055\236\001\002\000\004\055\uffe4\001\002\000\004" +
    "\055\uffe3\001\002\000\004\055\226\001\002\000\012\004" +
    "\012\013\011\015\013\022\223\001\002\000\004\002\001" +
    "\001\002\000\012\004\ufff4\013\ufff4\015\ufff4\022\ufff4\001" +
    "\002\000\012\004\ufffb\013\ufffb\015\ufffb\022\ufffb\001\002" +
    "\000\012\004\012\013\011\015\013\022\022\001\002\000" +
    "\004\055\024\001\002\000\004\002\ufffe\001\002\000\012" +
    "\004\ufff5\013\ufff5\015\ufff5\022\ufff5\001\002\000\004\017" +
    "\025\001\002\000\010\004\012\013\011\020\027\001\002" +
    "\000\004\055\221\001\002\000\004\021\035\001\002\000" +
    "\006\020\uffef\026\uffef\001\002\000\006\020\033\026\032" +
    "\001\002\000\006\004\012\013\011\001\002\000\004\021" +
    "\035\001\002\000\012\004\ufff1\013\ufff1\015\ufff1\022\ufff1" +
    "\001\002\000\030\004\012\005\051\006\036\010\040\012" +
    "\046\013\011\014\044\016\042\021\035\022\054\055\045" +
    "\001\002\000\004\017\204\001\002\000\004\025\201\001" +
    "\002\000\004\027\200\001\002\000\030\004\012\005\051" +
    "\006\036\010\040\012\046\013\011\014\044\016\042\021" +
    "\035\022\174\055\045\001\002\000\004\017\166\001\002" +
    "\000\024\005\051\006\036\010\040\012\046\014\044\016" +
    "\042\021\035\022\165\055\045\001\002\000\024\006\036" +
    "\017\066\027\162\030\076\032\065\051\071\052\067\053" +
    "\075\055\045\001\002\000\060\017\147\020\uffce\023\150" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\001\002\000\004\017\064\001\002\000\004\055\060" +
    "\001\002\000\024\005\uffd7\006\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\021\uffd7\022\uffd7\055\uffd7\001\002\000\004" +
    "\027\056\001\002\000\004\027\055\001\002\000\024\005" +
    "\uffe2\006\uffe2\010\uffe2\012\uffe2\014\uffe2\016\uffe2\021\uffe2" +
    "\022\uffe2\055\uffe2\001\002\000\034\004\uffec\005\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\021\uffec\022\uffec\055\uffec\001\002\000\024\005" +
    "\uffdf\006\uffdf\010\uffdf\012\uffdf\014\uffdf\016\uffdf\021\uffdf" +
    "\022\uffdf\055\uffdf\001\002\000\024\005\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\014\uffd9\016\uffd9\021\uffd9\022\uffd9\055\uffd9" +
    "\001\002\000\006\026\061\027\062\001\002\000\006\026" +
    "\uffe6\027\uffe6\001\002\000\004\055\063\001\002\000\030" +
    "\004\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\021\uffe8\022\uffe8\055\uffe8\001\002\000\006" +
    "\026\uffe5\027\uffe5\001\002\000\022\006\036\017\066\030" +
    "\076\032\065\051\071\052\067\053\075\055\045\001\002" +
    "\000\022\006\036\017\066\030\076\032\065\051\071\052" +
    "\067\053\075\055\045\001\002\000\022\006\036\017\066" +
    "\030\076\032\065\051\071\052\067\053\075\055\045\001" +
    "\002\000\052\020\uffb3\024\uffb3\026\uffb3\027\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\001\002\000\052\020\uffc8\024\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\052" +
    "\020\uffb4\024\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\044\020\140\031\110\032\101\033\115" +
    "\034\102\035\113\036\106\037\104\040\116\041\112\042" +
    "\105\043\103\044\111\045\107\046\114\047\100\050\117" +
    "\001\002\000\052\020\uffca\024\uffca\026\uffca\027\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\001\002\000\052\020\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000" +
    "\052\020\uffb2\024\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\052" +
    "\020\uffb6\024\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\001\002\000\022\006\036\017\066\030\076\032\065" +
    "\051\071\052\067\053\075\055\045\001\002\000\022\006" +
    "\036\017\066\030\076\032\065\051\071\052\067\053\075" +
    "\055\045\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\022" +
    "\006\036\017\066\030\076\032\065\051\071\052\067\053" +
    "\075\055\045\001\002\000\022\006\036\017\066\030\076" +
    "\032\065\051\071\052\067\053\075\055\045\001\002\000" +
    "\022\006\036\017\066\030\076\032\065\051\071\052\067" +
    "\053\075\055\045\001\002\000\022\006\036\017\066\030" +
    "\076\032\065\051\071\052\067\053\075\055\045\001\002" +
    "\000\022\006\036\017\066\030\076\032\065\051\071\052" +
    "\067\053\075\055\045\001\002\000\022\006\036\017\066" +
    "\030\076\032\065\051\071\052\067\053\075\055\045\001" +
    "\002\000\022\006\036\017\066\030\076\032\065\051\071" +
    "\052\067\053\075\055\045\001\002\000\022\006\036\017" +
    "\066\030\076\032\065\051\071\052\067\053\075\055\045" +
    "\001\002\000\022\006\036\017\066\030\076\032\065\051" +
    "\071\052\067\053\075\055\045\001\002\000\022\006\036" +
    "\017\066\030\076\032\065\051\071\052\067\053\075\055" +
    "\045\001\002\000\022\006\036\017\066\030\076\032\065" +
    "\051\071\052\067\053\075\055\045\001\002\000\022\006" +
    "\036\017\066\030\076\032\065\051\071\052\067\053\075" +
    "\055\045\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\052" +
    "\020\uffb8\024\uffb8\026\uffb8\027\uffb8\031\110\032\101\033" +
    "\115\034\102\035\113\036\106\037\104\040\116\041\112" +
    "\042\105\043\103\044\111\045\107\046\114\047\100\050" +
    "\uffb8\001\002\000\052\020\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\031\110\032\101\033\115\034\102\035\113\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\047\uffc0\050\uffc0\001\002\000\052\020\uffc5\024" +
    "\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\001\002" +
    "\000\046\020\uffba\024\uffba\026\uffba\027\uffba\031\110\032" +
    "\101\033\115\034\102\035\113\036\106\037\104\040\116" +
    "\041\112\042\105\043\103\044\111\047\uffba\050\uffba\001" +
    "\002\000\052\020\uffc3\024\uffc3\026\uffc3\027\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\001\002\000\052\020\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\031\110\032\101\033\115\034\102\035\113" +
    "\036\106\037\104\040\116\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\052" +
    "\020\uffbc\024\uffbc\026\uffbc\027\uffbc\031\110\032\101\033" +
    "\115\034\102\035\113\036\106\037\104\040\116\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\001\002\000\052\020\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\115\034\102\035\113\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\001\002\000\046\020\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\031\110\032\101\033\115\034\102" +
    "\035\113\036\106\037\104\040\116\041\112\042\105\043" +
    "\103\044\111\047\uffbb\050\uffbb\001\002\000\052\020\uffc2" +
    "\024\uffc2\026\uffc2\027\uffc2\031\110\032\101\033\115\034" +
    "\102\035\113\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\052\020\uffbe\024\uffbe\026\uffbe\027\uffbe\031\110" +
    "\032\101\033\115\034\102\035\113\036\106\037\104\040" +
    "\116\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\001\002\000\052\020\uffc1\024\uffc1\026" +
    "\uffc1\027\uffc1\031\110\032\101\033\115\034\102\035\113" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\052" +
    "\020\uffbd\024\uffbd\026\uffbd\027\uffbd\031\110\032\101\033" +
    "\115\034\102\035\113\036\106\037\104\040\116\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\001\002\000\052\020\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\001\002\000\052\020\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\115\034\102" +
    "\035\113\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001\002" +
    "\000\052\020\uffb9\024\uffb9\026\uffb9\027\uffb9\031\110\032" +
    "\101\033\115\034\102\035\113\036\106\037\104\040\116" +
    "\041\112\042\105\043\103\044\111\045\107\046\114\047" +
    "\uffb9\050\uffb9\001\002\000\004\021\035\001\002\000\026" +
    "\005\uffde\006\uffde\010\uffde\011\142\012\uffde\014\uffde\016" +
    "\uffde\021\uffde\022\uffde\055\uffde\001\002\000\004\021\035" +
    "\001\002\000\024\005\uffdd\006\uffdd\010\uffdd\012\uffdd\014" +
    "\uffdd\016\uffdd\021\uffdd\022\uffdd\055\uffdd\001\002\000\044" +
    "\020\145\031\110\032\101\033\115\034\102\035\113\036" +
    "\106\037\104\040\116\041\112\042\105\043\103\044\111" +
    "\045\107\046\114\047\100\050\117\001\002\000\052\020" +
    "\uffb5\024\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\001\002\000\052\020\uffb7\024\uffb7\026\uffb7\027\uffb7\031" +
    "\uffb7\032\uffb7\033\115\034\102\035\113\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\001\002\000\024\006\036\017\066" +
    "\020\153\030\076\032\065\051\071\052\067\053\075\055" +
    "\045\001\002\000\022\006\036\017\066\030\076\032\065" +
    "\051\071\052\067\053\075\055\045\001\002\000\044\024" +
    "\152\031\110\032\101\033\115\034\102\035\113\036\106" +
    "\037\104\040\116\041\112\042\105\043\103\044\111\045" +
    "\107\046\114\047\100\050\117\001\002\000\054\020\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\001\002\000\052\020\uffd6\024\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\001\002\000\046\020\uffcc\026" +
    "\uffcc\031\110\032\101\033\115\034\102\035\113\036\106" +
    "\037\104\040\116\041\112\042\105\043\103\044\111\045" +
    "\107\046\114\047\100\050\117\001\002\000\006\020\157" +
    "\026\156\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\052" +
    "\020\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\001\002\000\046\020\uffcb\026\uffcb\031\110\032\101" +
    "\033\115\034\102\035\113\036\106\037\104\040\116\041" +
    "\112\042\105\043\103\044\111\045\107\046\114\047\100" +
    "\050\117\001\002\000\044\027\163\031\110\032\101\033" +
    "\115\034\102\035\113\036\106\037\104\040\116\041\112" +
    "\042\105\043\103\044\111\045\107\046\114\047\100\050" +
    "\117\001\002\000\024\005\uffdb\006\uffdb\010\uffdb\012\uffdb" +
    "\014\uffdb\016\uffdb\021\uffdb\022\uffdb\055\uffdb\001\002\000" +
    "\024\005\uffda\006\uffda\010\uffda\012\uffda\014\uffda\016\uffda" +
    "\021\uffda\022\uffda\055\uffda\001\002\000\024\005\uffe1\006" +
    "\uffe1\010\uffe1\012\uffe1\014\uffe1\016\uffe1\021\uffe1\022\uffe1" +
    "\055\uffe1\001\002\000\034\004\uffea\005\uffea\006\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\021\uffea\022\uffea\055\uffea\001\002\000\022\006\036\017" +
    "\066\030\076\032\065\051\071\052\067\053\075\055\045" +
    "\001\002\000\044\020\170\031\110\032\101\033\115\034" +
    "\102\035\113\036\106\037\104\040\116\041\112\042\105" +
    "\043\103\044\111\045\107\046\114\047\100\050\117\001" +
    "\002\000\004\021\035\001\002\000\024\005\uffdc\006\uffdc" +
    "\010\uffdc\012\uffdc\014\uffdc\016\uffdc\021\uffdc\022\uffdc\055" +
    "\uffdc\001\002\000\004\055\060\001\002\000\024\005\051" +
    "\006\036\010\040\012\046\014\044\016\042\021\035\022" +
    "\175\055\045\001\002\000\034\004\uffeb\005\uffeb\006\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\021\uffeb\022\uffeb\055\uffeb\001\002\000\034\004\uffe9" +
    "\005\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9\055\uffe9\001\002" +
    "\000\006\026\061\027\177\001\002\000\030\004\uffe7\005" +
    "\uffe7\006\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7" +
    "\021\uffe7\022\uffe7\055\uffe7\001\002\000\024\005\uffd8\006" +
    "\uffd8\010\uffd8\012\uffd8\014\uffd8\016\uffd8\021\uffd8\022\uffd8" +
    "\055\uffd8\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\044" +
    "\027\203\031\110\032\101\033\115\034\102\035\113\036" +
    "\106\037\104\040\116\041\112\042\105\043\103\044\111" +
    "\045\107\046\114\047\100\050\117\001\002\000\024\005" +
    "\uffe0\006\uffe0\010\uffe0\012\uffe0\014\uffe0\016\uffe0\021\uffe0" +
    "\022\uffe0\055\uffe0\001\002\000\004\054\205\001\002\000" +
    "\006\020\207\026\206\001\002\000\024\006\036\017\066" +
    "\030\076\032\065\051\071\052\067\053\075\054\211\055" +
    "\045\001\002\000\052\020\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\001\002\000\006\020\uffd2\026" +
    "\uffd2\001\002\000\006\020\uffcf\026\uffcf\001\002\000\006" +
    "\020\215\026\214\001\002\000\046\020\uffd0\026\uffd0\031" +
    "\110\032\101\033\115\034\102\035\113\036\106\037\104" +
    "\040\116\041\112\042\105\043\103\044\111\045\107\046" +
    "\114\047\100\050\117\001\002\000\024\006\036\017\066" +
    "\030\076\032\065\051\071\052\067\053\075\054\211\055" +
    "\045\001\002\000\052\020\uffd3\024\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\050\uffd3\001\002\000\006\020\uffd1\026" +
    "\uffd1\001\002\000\006\020\uffee\026\uffee\001\002\000\012" +
    "\004\ufff3\013\ufff3\015\ufff3\022\ufff3\001\002\000\006\020" +
    "\uffed\026\uffed\001\002\000\012\004\012\013\011\015\013" +
    "\022\225\001\002\000\004\002\uffff\001\002\000\012\004" +
    "\ufffc\013\ufffc\015\ufffc\022\ufffc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\017\227\001\002\000\010\004\012\013" +
    "\011\020\230\001\002\000\004\021\035\001\002\000\006" +
    "\020\232\026\032\001\002\000\004\021\035\001\002\000" +
    "\012\004\ufff0\013\ufff0\015\ufff0\022\ufff0\001\002\000\012" +
    "\004\ufff2\013\ufff2\015\ufff2\022\ufff2\001\002\000\006\026" +
    "\ufff8\027\ufff8\001\002\000\012\017\025\023\244\026\ufff7" +
    "\027\ufff7\001\002\000\006\026\240\027\241\001\002\000" +
    "\004\055\243\001\002\000\012\004\ufffa\013\ufffa\015\ufffa" +
    "\022\ufffa\001\002\000\006\026\ufff9\027\ufff9\001\002\000" +
    "\010\023\244\026\ufff7\027\ufff7\001\002\000\004\051\245" +
    "\001\002\000\004\024\246\001\002\000\006\026\ufff6\027" +
    "\ufff6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\013\005\016" +
    "\010\017\011\015\021\007\001\001\000\006\006\236\007" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\223\010\221\011\015\021\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\022\021\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\030\013\027\021\025\001\001\000\002\001\001\000" +
    "\004\020\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\216\021\025\001\001\000\004\020\033\001" +
    "\001\000\002\001\001\000\020\014\040\016\042\017\052" +
    "\020\047\021\046\022\051\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\172" +
    "\017\052\020\047\021\171\022\051\023\036\001\001\000" +
    "\002\001\001\000\012\017\163\020\047\022\051\023\036" +
    "\001\001\000\012\022\073\023\072\025\160\030\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\073\023\072\025\071\030\067\001\001\000\012\022" +
    "\073\023\072\025\145\030\067\001\001\000\012\022\073" +
    "\023\072\025\143\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\073\023\072\025\076\030\067\001\001\000\002\001\001" +
    "\000\012\022\073\023\072\025\136\030\067\001\001\000" +
    "\012\022\073\023\072\025\135\030\067\001\001\000\012" +
    "\022\073\023\072\025\134\030\067\001\001\000\012\022" +
    "\073\023\072\025\133\030\067\001\001\000\012\022\073" +
    "\023\072\025\132\030\067\001\001\000\012\022\073\023" +
    "\072\025\131\030\067\001\001\000\012\022\073\023\072" +
    "\025\130\030\067\001\001\000\012\022\073\023\072\025" +
    "\127\030\067\001\001\000\012\022\073\023\072\025\126" +
    "\030\067\001\001\000\012\022\073\023\072\025\125\030" +
    "\067\001\001\000\012\022\073\023\072\025\124\030\067" +
    "\001\001\000\012\022\073\023\072\025\123\030\067\001" +
    "\001\000\012\022\073\023\072\025\122\030\067\001\001" +
    "\000\012\022\073\023\072\025\121\030\067\001\001\000" +
    "\012\022\073\023\072\025\120\030\067\001\001\000\012" +
    "\022\073\023\072\025\117\030\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\140" +
    "\001\001\000\002\001\001\000\004\020\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\022\073\023\072\024\154\025\153\030" +
    "\067\001\001\000\012\022\073\023\072\025\150\030\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\073" +
    "\023\072\025\157\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\073\023\072\025\166\030\067\001\001\000\002\001\001" +
    "\000\004\020\170\001\001\000\002\001\001\000\004\015" +
    "\175\001\001\000\012\017\163\020\047\022\051\023\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\073" +
    "\023\072\025\201\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\073\023\072\025\212\026\207\027\211\030\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\022\073\023" +
    "\072\025\212\026\215\030\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\022\021\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\230\013\027\021\025\001\001\000\004" +
    "\020\233\001\001\000\002\001\001\000\004\020\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DecafParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DecafParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DecafParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	private final Logger logger = Logger.getLogger(DecafParser.class.getName());
	
	private List<String> errors = new ArrayList<String>();
	
	/**
	 * @return
	 * <br>Not null
	 * <br>Shared
	 */
	public final List<String> getErrors() {
		return this.errors;
	}
	
	/**
	 * @param message
	 * <br>Maybe null
	 */
	public final void logError(final String message) {
		this.getErrors().add(message);
		this.logger.log(Level.SEVERE, message);
	}
	
	/**
	 * @return
	 * <br>Range: any boolean
	 */
	public final boolean hasErrors() {
		return !this.getErrors().isEmpty();
	}
	
	/**
	 * @return
	 * <br>Maybe null
	 * <br>Shared
	 */
	public final Symbol getStackTop() {
		return (Symbol) this.stack.peek();
	}
	
	@Override
	public final void report_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void report_fatal_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void syntax_error(final Symbol currentToken) {
		Tools.debugPrint(currentToken);
		Tools.debugPrint(this.stack);
		
		final Yylex scanner = (Yylex) this.getScanner();
		
		scanner.updateLocation();
		
		int row = scanner.getCurrentRow();
		int column = scanner.getCurrentColumn();
		String errorMessage = "Parse error";
		
		for (final Object symbol : this.stack) {
			switch (((Symbol) symbol).sym) {
			case DecafParserSymbols.LEFT_PARENTHESIS:
				errorMessage = "Missing \")\"";
				break;
			case DecafParserSymbols.LEFT_BRACE:
				errorMessage = "Missing \"}\"";
				break;
			case DecafParserSymbols.LEFT_BRACKET:
				errorMessage = "Missing \"]\"";
				break;
			default:
				break;
			}
		}
		
		final DecafToken token = Tools.cast(DecafToken.class, currentToken);
		
		if (token != null) {
			row = token.getRow();
			column = token.getColumn();
			
			errorMessage = "Unexpected \"" + token.getInputString() + "\"";
		}
		
		this.logError("(:" + row + ":" + column + ") " + errorMessage);
	}
	
	@Override
	public final void unrecovered_syntax_error(final Symbol currentToken) throws Exception {
		Tools.debugPrint(currentToken);
		throw new RuntimeException(this.getErrors().toString());
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DecafParser$actions {


	
	/**
	 * @return
	 * <br>Not null
	 * <br>Shared
	 */
	public final DecafParser getParser() {
		return this.parser;
	}
	
	/**
	 * @return
	 * <br>Maybe null
	 * <br>Shared
	 */
	public final Symbol getStackTop() {
		return this.getParser().getStackTop();
	}
	
	/**
	 * @param message
	 * <br>Maybe null
	 */
	public final void logError(final String message) {
		this.getParser().logError(message);
	}
	
	/**
	 * @param program
	 * <br>Maybe null
	 * @return {@code program} or {@code null} if there was an error
	 * <br>Maybe null
	 */
	public final Program nullIfErrors(final Program program) {
		return this.getParser().hasErrors() ? null : program;
	}
	

  private final DecafParser parser;

  /** Constructor */
  CUP$DecafParser$actions(DecafParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DecafParser$do_action(
    int                        CUP$DecafParser$act_num,
    java_cup.runtime.lr_parser CUP$DecafParser$parser,
    java.util.Stack            CUP$DecafParser$stack,
    int                        CUP$DecafParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DecafParser$result;

      /* select the action based on the action number */
      switch (CUP$DecafParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Literal ::= CHAR_LITERAL 
            {
              AbstractLiteral RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new CharLiteral(value);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Literal ::= BOOLEAN_LITERAL 
            {
              AbstractLiteral RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new BooleanLiteral(value);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Literal ::= INT_LITERAL 
            {
              AbstractLiteral RESULT = null;
		
		RESULT = new IntLiteral((DecafToken) this.getStackTop());
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS 
            {
              AbstractExpression RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = expression;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= NOT Expression 
            {
              AbstractExpression RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new NegationExpression(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= MINUS Expression 
            {
              AbstractExpression RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MinusExpression(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Expression OR Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expression ::= Expression AND Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expression ::= Expression NOT_EQUAL Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expression ::= Expression EQUAL Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expression ::= Expression GREATER_OR_EQUAL Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expression ::= Expression LESS_OR_EQUAL Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expression ::= Expression GREATER Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expression ::= Expression LESS Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expression ::= Expression BITWISE_ROTATE_RIGHT Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expression ::= Expression ARITHMETIC_SHIFT_RIGHT Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expression ::= Expression ARITHMETIC_SHIFT_LEFT Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expression ::= Expression MODULO Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= Expression DIVIDE Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= Expression TIMES Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= Expression MINUS Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression PLUS Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		final String operator = ((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1)).getInputString();
		
		RESULT = new BinaryOperationExpression(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= Literal 
            {
              AbstractExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractLiteral literal = (AbstractLiteral)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new LiteralExpression(literal);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= MethodCall 
            {
              AbstractExpression RESULT = null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractMethodCall methodCall = (AbstractMethodCall)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodCallExpression(methodCall);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Location 
            {
              AbstractExpression RESULT = null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractLocation location = (AbstractLocation)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new LocationExpression(location);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expressions ::= Expressions COMMA Expression 
            {
              List RESULT = null;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List expressions = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractExpression>(expressions);
		
		RESULT.add(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Expressions*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expressions ::= Expression 
            {
              List RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractExpression>();
		
		RESULT.add(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Expressions*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Location ::= IDENTIFIER LEFT_BRACKET Expression RIGHT_BRACKET 
            {
              AbstractLocation RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayLocation((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Location ::= IDENTIFIER 
            {
              AbstractLocation RESULT = null;
		
		RESULT = new IdentifierLocation((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CalloutArgument ::= STRING_LITERAL 
            {
              AbstractCalloutArgument RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new StringCalloutArgument(stringLiteral);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgument*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CalloutArgument ::= Expression 
            {
              AbstractCalloutArgument RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ExpressionCalloutArgument(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgument*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CalloutArguments ::= CalloutArguments COMMA CalloutArgument 
            {
              List RESULT = null;
		int calloutArgumentsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int calloutArgumentsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List calloutArguments = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int calloutArgumentleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int calloutArgumentright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractCalloutArgument calloutArgument = (AbstractCalloutArgument)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractCalloutArgument>(calloutArguments);
		
		RESULT.add(calloutArgument);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArguments*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CalloutArguments ::= CalloutArgument 
            {
              List RESULT = null;
		int calloutArgumentleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int calloutArgumentright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractCalloutArgument calloutArgument = (AbstractCalloutArgument)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractCalloutArgument>();
		
		RESULT.add(calloutArgument);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArguments*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArguments RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int calloutArgumentsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int calloutArgumentsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List calloutArguments = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallout(stringLiteral, calloutArguments);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallout(stringLiteral, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS Expressions RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List expressions = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCall((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3), expressions);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		
		RESULT = new MethodCall((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 2), null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= Block 
            {
              AbstractStatement RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new BlockStatement(block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= CONTINUE SEMICOLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new ContinueStatement();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= BREAK SEMICOLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new BreakStatement();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= RETURN Expression SEMICOLON 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ReturnStatement(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= RETURN SEMICOLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new ReturnStatement(null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= WHILE LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new WhileStatement(expression, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block ELSE Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Block thenBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block elseBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new IfStatement(expression, thenBlock, elseBlock);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new IfStatement(expression, block, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= MethodCall SEMICOLON 
            {
              AbstractStatement RESULT = null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractMethodCall methodCall = (AbstractMethodCall)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallStatement(methodCall);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= Location ASSIGN Expression SEMICOLON 
            {
              AbstractStatement RESULT = null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		AbstractLocation location = (AbstractLocation)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new AssignmentStatement(location, expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statements ::= Statements Statement 
            {
              List RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractStatement statement = (AbstractStatement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractStatement>(statements);
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statements ::= Statement 
            {
              List RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractStatement statement = (AbstractStatement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractStatement>();
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= BOOLEAN 
            {
              Class RESULT = null;
		
		RESULT = boolean.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= INT 
            {
              Class RESULT = null;
		
		RESULT = int.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdentifierList ::= IdentifierList COMMA IDENTIFIER 
            {
              List RESULT = null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		
		RESULT = new ArrayList<DecafToken>(identifierList);
		
		RESULT.add((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdentifierList ::= IDENTIFIER 
            {
              List RESULT = null;
		
		RESULT = new ArrayList<DecafToken>();
		
		RESULT.add((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableDeclarations ::= VariableDeclarations Type IdentifierList SEMICOLON 
            {
              List RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<VariableDeclaration>(variableDeclarations);
		
		for (final DecafToken identifier : (List<DecafToken>) identifierList) {
			RESULT.add(new VariableDeclaration(type, identifier));
		}
		
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableDeclarations ::= Type IdentifierList SEMICOLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final DecafToken identifier : (List<DecafToken>) identifierList) {
			RESULT.add(new VariableDeclaration(type, identifier));
		}

	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= LEFT_BRACE Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(null, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Block ::= LEFT_BRACE VariableDeclarations RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Block ::= LEFT_BRACE RIGHT_BRACE 
            {
              Block RESULT = null;
		
		RESULT = new Block(null, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParameterDeclaration ::= Type IDENTIFIER 
            {
              ParameterDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ParameterDeclaration(type, (DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 0));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		ParameterDeclaration parameterDeclaration = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<ParameterDeclaration>(parameterDeclarations);
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		ParameterDeclaration parameterDeclaration = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<ParameterDeclaration>();
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(
				void.class,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4),
				parameterDeclarations,
				block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(
				type,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 4),
				parameterDeclarations,
				block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(
				void.class,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				null,
				block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(
				type,
				(DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				null,
				block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclarations ::= MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>();
		
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclarations ::= MethodDeclarations MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>(methodDeclarations);
		
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              Object[] RESULT = null;
		
		RESULT = new Object[] {
				CUP$DecafParser$stack.get(CUP$DecafParser$top - 3),
				new IntLiteral((DecafToken) CUP$DecafParser$stack.get(CUP$DecafParser$top - 1))
		};
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= IDENTIFIER 
            {
              Object[] RESULT = null;
		
		RESULT = new Object[] { CUP$DecafParser$stack.get(CUP$DecafParser$top - 0) };
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Fields ::= Field 
            {
              List RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Object[] field = (Object[])((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object[]>();
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Fields ::= Fields COMMA Field 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Object[] field = (Object[])((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object[]>(fields);
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldDeclaration ::= Type Fields SEMICOLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object[] field : (List<Object[]>) fields) {
			switch (field.length) {
			case 1:
				RESULT.add(new FieldDeclaration(type, (DecafToken) field[0]));
				break;
			case 2:
				RESULT.add(new ArrayFieldDeclaration(type, (DecafToken) field[0], (IntLiteral) field[1]));
				break;
			default:
				throw new IllegalArgumentException("" + Arrays.toString(field));
			}
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FieldDeclarations ::= FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclarations);
		
		RESULT.addAll(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = this.nullIfErrors(new Program(fieldDeclarations, methodDeclarations, (DecafToken) this.getStackTop()));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = this.nullIfErrors(new Program(null, methodDeclarations, (DecafToken) this.getStackTop()));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = this.nullIfErrors(new Program(fieldDeclarations, null, (DecafToken) this.getStackTop()));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		RESULT = start_val;
              CUP$DecafParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DecafParser$parser.done_parsing();
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE 
            {
              Program RESULT = null;
		
		RESULT = this.nullIfErrors(new Program(null, null, (DecafToken) this.getStackTop()));
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

