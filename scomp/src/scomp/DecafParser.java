
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 18 11:40:29 PDT 2010
//----------------------------------------------------

package scomp;

import java.util.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Jul 18 11:40:29 PDT 2010
  */
public class DecafParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DecafParser() {super();}

  /** Constructor which sets the default scanner. */
  public DecafParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\003\006\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\003\002" +
    "\000\002\003\003\000\002\003\004\000\002\003\005\000" +
    "\002\003\006\000\002\003\006\000\002\003\007\000\002" +
    "\004\004\000\002\004\003\000\002\005\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\003\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\010\004\000\002\010\003\000\002" +
    "\011\007\000\002\011\007\000\002\011\010\000\002\011" +
    "\010\000\002\012\003\000\002\012\005\000\002\013\004" +
    "\000\002\020\004\000\002\020\005\000\002\020\005\000" +
    "\002\020\006\000\002\014\005\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\021\003\000\002\021" +
    "\003\000\002\016\003\000\002\016\004\000\002\017\006" +
    "\000\002\017\004\000\002\017\007\000\002\017\011\000" +
    "\002\017\007\000\002\017\004\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\022" +
    "\005\000\002\022\006\000\002\022\006\000\002\022\010" +
    "\000\002\026\003\000\002\026\005\000\002\027\003\000" +
    "\002\027\003\000\002\023\003\000\002\023\006\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\002\ufffc\007\005\001\002\000\004\002" +
    "\247\001\002\000\006\002\ufffb\055\006\001\002\000\006" +
    "\002\ufffa\021\007\001\002\000\014\002\ufff9\004\012\013" +
    "\011\015\013\022\015\001\002\000\006\003\224\055\225" +
    "\001\002\000\006\003\uffd9\055\uffd9\001\002\000\006\003" +
    "\uffd8\055\uffd8\001\002\000\004\055\214\001\002\000\014" +
    "\002\ufff8\004\012\013\011\015\013\022\211\001\002\000" +
    "\004\002\001\001\002\000\014\002\uffe9\004\uffe9\013\uffe9" +
    "\015\uffe9\022\uffe9\001\002\000\014\002\ufff4\004\ufff4\013" +
    "\ufff4\015\ufff4\022\ufff4\001\002\000\014\002\ufff7\004\012" +
    "\013\011\015\013\022\022\001\002\000\004\055\024\001" +
    "\002\000\004\002\ufffe\001\002\000\014\002\uffea\004\uffea" +
    "\013\uffea\015\uffea\022\uffea\001\002\000\004\017\025\001" +
    "\002\000\010\004\012\013\011\020\027\001\002\000\004" +
    "\055\207\001\002\000\004\021\035\001\002\000\006\020" +
    "\uffe4\026\uffe4\001\002\000\006\020\033\026\032\001\002" +
    "\000\006\004\012\013\011\001\002\000\004\021\035\001" +
    "\002\000\014\002\uffe6\004\uffe6\013\uffe6\015\uffe6\022\uffe6" +
    "\001\002\000\030\004\012\005\050\006\036\010\040\012" +
    "\046\013\011\014\044\016\042\021\035\022\054\055\045" +
    "\001\002\000\004\017\172\001\002\000\004\025\167\001" +
    "\002\000\004\027\166\001\002\000\030\004\012\005\050" +
    "\006\036\010\040\012\046\013\011\014\044\016\042\021" +
    "\035\022\162\055\045\001\002\000\004\017\154\001\002" +
    "\000\024\005\050\006\036\010\040\012\046\014\044\016" +
    "\042\021\035\022\153\055\045\001\002\000\024\006\036" +
    "\017\070\027\147\030\075\032\065\051\072\052\067\053" +
    "\076\055\045\001\002\000\060\017\135\020\uffc3\023\136" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\001\002\000\004\017\064\001\002\000\004\055\060" +
    "\001\002\000\004\027\056\001\002\000\024\005\uffcc\006" +
    "\uffcc\010\uffcc\012\uffcc\014\uffcc\016\uffcc\021\uffcc\022\uffcc" +
    "\055\uffcc\001\002\000\004\027\055\001\002\000\024\005" +
    "\uffd7\006\uffd7\010\uffd7\012\uffd7\014\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\055\uffd7\001\002\000\036\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\021\uffe1\022\uffe1\055\uffe1\001\002\000" +
    "\024\005\uffd4\006\uffd4\010\uffd4\012\uffd4\014\uffd4\016\uffd4" +
    "\021\uffd4\022\uffd4\055\uffd4\001\002\000\024\005\uffce\006" +
    "\uffce\010\uffce\012\uffce\014\uffce\016\uffce\021\uffce\022\uffce" +
    "\055\uffce\001\002\000\006\026\061\027\062\001\002\000" +
    "\006\026\uffdb\027\uffdb\001\002\000\004\055\063\001\002" +
    "\000\030\004\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\021\uffdd\022\uffdd\055\uffdd\001\002" +
    "\000\006\026\uffda\027\uffda\001\002\000\022\006\036\017" +
    "\070\030\075\032\065\051\072\052\067\053\076\055\045" +
    "\001\002\000\022\006\036\017\070\030\075\032\065\051" +
    "\072\052\067\053\076\055\045\001\002\000\044\020\130" +
    "\031\102\032\115\033\100\034\114\035\111\036\122\037" +
    "\120\040\123\041\117\042\110\043\113\044\121\045\104" +
    "\046\106\047\101\050\103\001\002\000\052\020\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002" +
    "\000\022\006\036\017\070\030\075\032\065\051\072\052" +
    "\067\053\076\055\045\001\002\000\052\020\uffbd\024\uffbd" +
    "\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\001\002\000" +
    "\052\020\uffa4\024\uffa4\026\uffa4\027\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\001\002\000\052\020\uffbf\024\uffbf\026\uffbf\027" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\052\020\uffbe" +
    "\024\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\001" +
    "\002\000\022\006\036\017\070\030\075\032\065\051\072" +
    "\052\067\053\076\055\045\001\002\000\052\020\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\001\002" +
    "\000\052\020\uffba\024\uffba\026\uffba\027\uffba\031\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\001\002\000\022\006\uffb2\017\uffb2\030\uffb2" +
    "\032\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\001\002\000" +
    "\022\006\uffa6\017\uffa6\030\uffa6\032\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\055\uffa6\001\002\000\022\006\uffb4\017\uffb4\030" +
    "\uffb4\032\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\001\002" +
    "\000\022\006\uffa5\017\uffa5\030\uffa5\032\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\055\uffa5\001\002\000\022\006\uffa8\017\uffa8" +
    "\030\uffa8\032\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\001" +
    "\002\000\022\006\uffb5\017\uffb5\030\uffb5\032\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\055\uffb5\001\002\000\022\006\uffa7\017" +
    "\uffa7\030\uffa7\032\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7" +
    "\001\002\000\022\006\uffb6\017\uffb6\030\uffb6\032\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\055\uffb6\001\002\000\022\006\uffab" +
    "\017\uffab\030\uffab\032\uffab\051\uffab\052\uffab\053\uffab\055" +
    "\uffab\001\002\000\022\006\uffb0\017\uffb0\030\uffb0\032\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\055\uffb0\001\002\000\022\006" +
    "\uffb8\017\uffb8\030\uffb8\032\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\055\uffb8\001\002\000\022\006\uffaa\017\uffaa\030\uffaa\032" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\055\uffaa\001\002\000\022" +
    "\006\uffb1\017\uffb1\030\uffb1\032\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\055\uffb1\001\002\000\022\006\uffb3\017\uffb3\030\uffb3" +
    "\032\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\001\002\000" +
    "\022\006\036\017\070\030\075\032\065\051\072\052\067" +
    "\053\076\055\045\001\002\000\022\006\uffac\017\uffac\030" +
    "\uffac\032\uffac\051\uffac\052\uffac\053\uffac\055\uffac\001\002" +
    "\000\022\006\uffae\017\uffae\030\uffae\032\uffae\051\uffae\052" +
    "\uffae\053\uffae\055\uffae\001\002\000\022\006\uffa9\017\uffa9" +
    "\030\uffa9\032\uffa9\051\uffa9\052\uffa9\053\uffa9\055\uffa9\001" +
    "\002\000\022\006\uffaf\017\uffaf\030\uffaf\032\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\055\uffaf\001\002\000\022\006\uffad\017" +
    "\uffad\030\uffad\032\uffad\051\uffad\052\uffad\053\uffad\055\uffad" +
    "\001\002\000\022\006\uffb7\017\uffb7\030\uffb7\032\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\055\uffb7\001\002\000\052\020\uffbc" +
    "\024\uffbc\026\uffbc\027\uffbc\031\102\032\115\033\100\034" +
    "\114\035\111\036\122\037\120\040\123\041\117\042\110" +
    "\043\113\044\121\045\104\046\106\047\101\050\103\001" +
    "\002\000\044\020\127\031\102\032\115\033\100\034\114" +
    "\035\111\036\122\037\120\040\123\041\117\042\110\043" +
    "\113\044\121\045\104\046\106\047\101\050\103\001\002" +
    "\000\052\020\uffb9\024\uffb9\026\uffb9\027\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\001\002\000\004\021\035\001\002\000\026" +
    "\005\uffd3\006\uffd3\010\uffd3\011\132\012\uffd3\014\uffd3\016" +
    "\uffd3\021\uffd3\022\uffd3\055\uffd3\001\002\000\004\021\035" +
    "\001\002\000\024\005\uffd2\006\uffd2\010\uffd2\012\uffd2\014" +
    "\uffd2\016\uffd2\021\uffd2\022\uffd2\055\uffd2\001\002\000\052" +
    "\020\uffbb\024\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033" +
    "\100\034\114\035\111\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\001\002\000\024\006\036\017\070\020\141\030\075" +
    "\032\065\051\072\052\067\053\076\055\045\001\002\000" +
    "\022\006\036\017\070\030\075\032\065\051\072\052\067" +
    "\053\076\055\045\001\002\000\044\024\140\031\102\032" +
    "\115\033\100\034\114\035\111\036\122\037\120\040\123" +
    "\041\117\042\110\043\113\044\121\045\104\046\106\047" +
    "\101\050\103\001\002\000\054\020\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002\000" +
    "\052\020\uffcb\024\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\001\002\000\046\020\uffc1\026\uffc1\031\102\032" +
    "\115\033\100\034\114\035\111\036\122\037\120\040\123" +
    "\041\117\042\110\043\113\044\121\045\104\046\106\047" +
    "\101\050\103\001\002\000\006\020\145\026\144\001\002" +
    "\000\022\006\036\017\070\030\075\032\065\051\072\052" +
    "\067\053\076\055\045\001\002\000\052\020\uffca\024\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\001\002\000" +
    "\046\020\uffc0\026\uffc0\031\102\032\115\033\100\034\114" +
    "\035\111\036\122\037\120\040\123\041\117\042\110\043" +
    "\113\044\121\045\104\046\106\047\101\050\103\001\002" +
    "\000\024\005\uffd0\006\uffd0\010\uffd0\012\uffd0\014\uffd0\016" +
    "\uffd0\021\uffd0\022\uffd0\055\uffd0\001\002\000\044\027\151" +
    "\031\102\032\115\033\100\034\114\035\111\036\122\037" +
    "\120\040\123\041\117\042\110\043\113\044\121\045\104" +
    "\046\106\047\101\050\103\001\002\000\024\005\uffcf\006" +
    "\uffcf\010\uffcf\012\uffcf\014\uffcf\016\uffcf\021\uffcf\022\uffcf" +
    "\055\uffcf\001\002\000\024\005\uffd6\006\uffd6\010\uffd6\012" +
    "\uffd6\014\uffd6\016\uffd6\021\uffd6\022\uffd6\055\uffd6\001\002" +
    "\000\036\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\021\uffdf" +
    "\022\uffdf\055\uffdf\001\002\000\022\006\036\017\070\030" +
    "\075\032\065\051\072\052\067\053\076\055\045\001\002" +
    "\000\044\020\156\031\102\032\115\033\100\034\114\035" +
    "\111\036\122\037\120\040\123\041\117\042\110\043\113" +
    "\044\121\045\104\046\106\047\101\050\103\001\002\000" +
    "\004\021\035\001\002\000\024\005\uffd1\006\uffd1\010\uffd1" +
    "\012\uffd1\014\uffd1\016\uffd1\021\uffd1\022\uffd1\055\uffd1\001" +
    "\002\000\004\055\060\001\002\000\024\005\050\006\036" +
    "\010\040\012\046\014\044\016\042\021\035\022\163\055" +
    "\045\001\002\000\036\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\021\uffe0\022\uffe0\055\uffe0\001\002\000\036\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\021\uffde\022\uffde\055\uffde" +
    "\001\002\000\006\026\061\027\165\001\002\000\030\004" +
    "\uffdc\005\uffdc\006\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\055\uffdc\001\002\000\024\005" +
    "\uffcd\006\uffcd\010\uffcd\012\uffcd\014\uffcd\016\uffcd\021\uffcd" +
    "\022\uffcd\055\uffcd\001\002\000\022\006\036\017\070\030" +
    "\075\032\065\051\072\052\067\053\076\055\045\001\002" +
    "\000\044\027\171\031\102\032\115\033\100\034\114\035" +
    "\111\036\122\037\120\040\123\041\117\042\110\043\113" +
    "\044\121\045\104\046\106\047\101\050\103\001\002\000" +
    "\024\005\uffd5\006\uffd5\010\uffd5\012\uffd5\014\uffd5\016\uffd5" +
    "\021\uffd5\022\uffd5\055\uffd5\001\002\000\004\054\173\001" +
    "\002\000\006\020\175\026\174\001\002\000\024\006\036" +
    "\017\070\030\075\032\065\051\072\052\067\053\076\054" +
    "\177\055\045\001\002\000\052\020\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\046\020" +
    "\uffc5\026\uffc5\031\102\032\115\033\100\034\114\035\111" +
    "\036\122\037\120\040\123\041\117\042\110\043\113\044" +
    "\121\045\104\046\106\047\101\050\103\001\002\000\006" +
    "\020\uffc4\026\uffc4\001\002\000\006\020\uffc7\026\uffc7\001" +
    "\002\000\006\020\203\026\202\001\002\000\024\006\036" +
    "\017\070\030\075\032\065\051\072\052\067\053\076\054" +
    "\177\055\045\001\002\000\052\020\uffc8\024\uffc8\026\uffc8" +
    "\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\006\020" +
    "\uffc6\026\uffc6\001\002\000\006\020\uffe3\026\uffe3\001\002" +
    "\000\014\002\uffe8\004\uffe8\013\uffe8\015\uffe8\022\uffe8\001" +
    "\002\000\006\020\uffe2\026\uffe2\001\002\000\014\002\ufff6" +
    "\004\012\013\011\015\013\022\213\001\002\000\004\002" +
    "\uffff\001\002\000\014\002\ufff5\004\ufff5\013\ufff5\015\ufff5" +
    "\022\ufff5\001\002\000\004\002\ufffd\001\002\000\004\017" +
    "\215\001\002\000\010\004\012\013\011\020\216\001\002" +
    "\000\004\021\035\001\002\000\006\020\220\026\032\001" +
    "\002\000\004\021\035\001\002\000\014\002\uffe5\004\uffe5" +
    "\013\uffe5\015\uffe5\022\uffe5\001\002\000\014\002\uffe7\004" +
    "\uffe7\013\uffe7\015\uffe7\022\uffe7\001\002\000\006\026\ufff1" +
    "\027\ufff1\001\002\000\004\023\244\001\002\000\014\003" +
    "\233\017\025\023\234\026\ufff0\027\ufff0\001\002\000\006" +
    "\026\227\027\230\001\002\000\006\003\224\055\232\001" +
    "\002\000\014\002\ufff3\004\ufff3\013\ufff3\015\ufff3\022\ufff3" +
    "\001\002\000\006\026\ufff2\027\ufff2\001\002\000\012\003" +
    "\233\023\234\026\ufff0\027\ufff0\001\002\000\004\051\242" +
    "\001\002\000\006\003\235\051\236\001\002\000\004\024" +
    "\241\001\002\000\006\003\240\024\237\001\002\000\006" +
    "\026\uffef\027\uffef\001\002\000\006\026\uffeb\027\uffeb\001" +
    "\002\000\006\026\uffec\027\uffec\001\002\000\004\024\243" +
    "\001\002\000\006\026\uffed\027\uffed\001\002\000\004\051" +
    "\245\001\002\000\004\024\246\001\002\000\006\026\uffee" +
    "\027\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\013\005\016" +
    "\010\017\011\015\021\007\001\001\000\006\006\225\007" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\211\010\207\011\015\021\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\022\021\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\030\013\027\021\025\001\001\000\002\001\001\000" +
    "\004\020\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\204\021\025\001\001\000\004\020\033\001" +
    "\001\000\002\001\001\000\020\014\040\016\042\017\052" +
    "\020\050\021\046\022\051\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\160" +
    "\017\052\020\050\021\157\022\051\023\036\001\001\000" +
    "\002\001\001\000\012\017\151\020\050\022\051\023\036" +
    "\001\001\000\012\022\073\023\072\025\147\030\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\073\023\072\025\065\030\070\001\001\000\012\022" +
    "\073\023\072\025\133\030\070\001\001\000\014\031\115" +
    "\032\111\033\123\034\106\035\104\001\001\000\002\001" +
    "\001\000\012\022\073\023\072\025\125\030\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\022\073\023\072\025\076\030\070" +
    "\001\001\000\002\001\001\000\014\031\115\032\111\033" +
    "\123\034\106\035\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\073\023\072\025\124\030\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\115\032" +
    "\111\033\123\034\106\035\104\001\001\000\014\031\115" +
    "\032\111\033\123\034\106\035\104\001\001\000\002\001" +
    "\001\000\004\020\130\001\001\000\002\001\001\000\004" +
    "\020\132\001\001\000\002\001\001\000\014\031\115\032" +
    "\111\033\123\034\106\035\104\001\001\000\014\022\073" +
    "\023\072\024\142\025\141\030\070\001\001\000\012\022" +
    "\073\023\072\025\136\030\070\001\001\000\014\031\115" +
    "\032\111\033\123\034\106\035\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\031\115\032\111\033\123" +
    "\034\106\035\104\001\001\000\002\001\001\000\012\022" +
    "\073\023\072\025\145\030\070\001\001\000\002\001\001" +
    "\000\014\031\115\032\111\033\123\034\106\035\104\001" +
    "\001\000\002\001\001\000\014\031\115\032\111\033\123" +
    "\034\106\035\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\073\023\072\025\154" +
    "\030\070\001\001\000\014\031\115\032\111\033\123\034" +
    "\106\035\104\001\001\000\004\020\156\001\001\000\002" +
    "\001\001\000\004\015\163\001\001\000\012\017\151\020" +
    "\050\022\051\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\073\023\072\025\167\030\070\001\001" +
    "\000\014\031\115\032\111\033\123\034\106\035\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\073\023\072\025\175\026\200\027\177\030" +
    "\070\001\001\000\002\001\001\000\014\031\115\032\111" +
    "\033\123\034\106\035\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\073\023\072" +
    "\025\175\027\203\030\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\022\021\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\216\013\027\021\025\001\001\000\004\020" +
    "\221\001\001\000\002\001\001\000\004\020\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DecafParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DecafParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DecafParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*
public void report_error(String message, Object info) {

	if(message.equals("Syntax error")) {
		
		if(((Symbol)info).sym == 0) {
			System.err.println(((Symbol)info).sym);
		}
		else {
			System.err.println("Syntax Error '" + ((DecafToken)(info)).getInputString() + 
			"' at (" + ((DecafToken)info).getRow() + "," + ((DecafToken)info).getColumn() + ")");
		}
		
	}
}
*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DecafParser$actions {
  private final DecafParser parser;

  /** Constructor */
  CUP$DecafParser$actions(DecafParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DecafParser$do_action(
    int                        CUP$DecafParser$act_num,
    java_cup.runtime.lr_parser CUP$DecafParser$parser,
    java.util.Stack            CUP$DecafParser$stack,
    int                        CUP$DecafParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DecafParser$result;

      /* select the action based on the action number */
      switch (CUP$DecafParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Literal ::= CHAR_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Literal ::= INT_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondOp ::= OR 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*CondOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CondOp ::= AND 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*CondOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EqOp ::= NOT_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EqOp ::= EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RelOp ::= GREATER_OR_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RelOp ::= LESSER_OR_EQUAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RelOp ::= GREATER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RelOp ::= LESSER 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ArithOp ::= BITWISE_ROTATE_RIGHT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ArithOp ::= ARITHMETIC_SHIFT_RIGHT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ArithOp ::= ARITHMETIC_SHIFT_LEFT 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ArithOp ::= MODULO 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ArithOp ::= DIVIDE 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ArithOp ::= TIMES 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ArithOp ::= MINUS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ArithOp ::= PLUS 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BinOp ::= CondOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BinOp ::= EqOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BinOp ::= RelOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BinOp ::= ArithOp 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinOp*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= NOT Expr 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= MINUS Expr 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr BinOp Expr 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Literal 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= MethodCall 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Location 
            {
              Expr RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expr*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exprs ::= Exprs COMMA Expr 
            {
              List RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exprs ::= Expr 
            {
              List RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Exprs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Location ::= IDENTIFIER LEFT_BRACKET Expr RIGHT_BRACKET 
            {
              Location RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Location ::= IDENTIFIER 
            {
              Location RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CalloutArg ::= STRING_LITERAL 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CalloutArg ::= Expr 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CalloutArgs ::= CalloutArgs COMMA CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CalloutArgs ::= CalloutArg 
            {
              Object RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArgs RIGHT_PARENTHESIS 
            {
              MethodCall RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS 
            {
              MethodCall RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS Exprs RIGHT_PARENTHESIS 
            {
              MethodCall RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              MethodCall RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= Block 
            {
              Statement RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new StatementBlock(block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= CONTINUE SEMI_COLON 
            {
              Statement RESULT = null;
		
		RESULT = new StatementContinue();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= BREAK SEMI_COLON 
            {
              Statement RESULT = null;
		
		RESULT = new StatementBreak();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= RETURN Expr SEMI_COLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new StatementReturn(expr);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= RETURN SEMI_COLON 
            {
              Statement RESULT = null;
		
		RESULT = new StatementReturn(null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= WHILE LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new StatementWhile(expr, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block ELSE Block 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int ifBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int ifBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Block ifBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block elseBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new StatementIf(expr, ifBlock, elseBlock);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= IF LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS Block 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new StatementIf(expr, block, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= MethodCall SEMI_COLON 
            {
              Statement RESULT = null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		MethodCall methodCall = (MethodCall)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new StatementMethodCall(methodCall);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= Location ASSIGN Expr SEMI_COLON 
            {
              Statement RESULT = null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		Location location = (Location)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new StatementLocation(location, expr);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statements ::= Statements Statement 
            {
              List RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Statement>(statements);
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statements ::= Statement 
            {
              List RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Statement>();
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= BOOLEAN 
            {
              Class RESULT = null;
		
		RESULT = boolean.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= INT 
            {
              Class RESULT = null;
		
		RESULT = int.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IdentifierList ::= IdentifierList COMMA IDENTIFIER 
            {
              List RESULT = null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>(identifierList);
		
		RESULT.add(identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IdentifierList ::= IDENTIFIER 
            {
              List RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>();
		
		RESULT.add(identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VariableDeclarations ::= VariableDeclarations Type IdentifierList SEMI_COLON 
            {
              List RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<VariableDeclaration>(variableDeclarations);
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}
		
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VariableDeclarations ::= Type IdentifierList SEMI_COLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}

	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Block ::= LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Block ::= LEFT_BRACE Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(null, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Block ::= LEFT_BRACE VariableDeclarations RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Block ::= LEFT_BRACE RIGHT_BRACE 
            {
              Block RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParameterDeclaration ::= Type IDENTIFIER 
            {
              FieldDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new FieldDeclaration(type, identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		FieldDeclaration parameterDeclaration = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(parameterDeclarations);
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParameterDeclarations ::= ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		FieldDeclaration parameterDeclaration = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(void.class, identifier, parameterDeclarations, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(type, identifier, parameterDeclarations, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(void.class, identifier, null, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(type, identifier, null, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MethodDeclarations ::= MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>();
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MethodDeclarations ::= MethodDeclarations MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>(methodDeclarations);
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL error 
            {
              String RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Field ::= IDENTIFIER LEFT_BRACKET error RIGHT_BRACKET 
            {
              String RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Field ::= IDENTIFIER error INT_LITERAL RIGHT_BRACKET 
            {
              String RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Field ::= error LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              String RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              String RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int elementCountleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int elementCountright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Object elementCount = (Object)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = identifier + " " + elementCount;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Field ::= IDENTIFIER 
            {
              String RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = identifier;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Fields ::= Field 
            {
              List RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>();
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Fields ::= Fields COMMA Field 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>(fields);
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FieldDeclaration ::= Type Fields SEMI_COLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object field : fields) {
			final String[] fieldElements = ((String) field).split(" ");
			
			switch (fieldElements.length) {
			case 1:
				RESULT.add(new FieldDeclaration(type, fieldElements[0]));
				break;
			case 2:
				RESULT.add(new ArrayFieldDeclaration(type, fieldElements[0], Integer.parseInt(fieldElements[1])));
				break;
			default:
				throw new IllegalArgumentException("" + field);
			}
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldDeclarations ::= FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclarations);
		
		RESULT.addAll(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Missing '}'");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Missing '}'");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Missing '}'");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Program ::= CLASS IDENTIFIER LEFT_BRACE 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Missing '}'");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Program ::= CLASS IDENTIFIER 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = Tools.cast(DecafToken.class, CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0));
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Unmatched '}'");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Program ::= CLASS 
            {
              Program RESULT = null;
		
		final DecafToken lastToken = (DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top - 0);
		
		if (lastToken != null) {
			throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Parse error");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= 
            {
              Program RESULT = null;
		
		final Yylex scanner = (Yylex) this.parser.getScanner();
		
		if (scanner != null) {
			throw new RuntimeException("(:" + scanner.getCurrentRow() + ":" + scanner.getCurrentColumn() + ") Parse error");
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(fieldDeclarations, methodDeclarations);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(null, methodDeclarations);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(fieldDeclarations, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		RESULT = start_val;
              CUP$DecafParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DecafParser$parser.done_parsing();
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE 
            {
              Program RESULT = null;
		
		RESULT = new Program(null, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

