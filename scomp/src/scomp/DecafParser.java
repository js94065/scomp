
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jul 24 21:33:00 CEST 2010
//----------------------------------------------------

package scomp;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sat Jul 24 21:33:00 CEST 2010
  */
public class DecafParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DecafParser() {super();}

  /** Constructor which sets the default scanner. */
  public DecafParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\003\006\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\006\000\002" +
    "\010\004\000\002\010\003\000\002\011\007\000\002\011" +
    "\007\000\002\011\010\000\002\011\010\000\002\012\003" +
    "\000\002\012\005\000\002\013\004\000\002\020\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\006\000\002" +
    "\014\005\000\002\014\006\000\002\015\003\000\002\015" +
    "\005\000\002\021\003\000\002\021\003\000\002\016\003" +
    "\000\002\016\004\000\002\017\006\000\002\017\004\000" +
    "\002\017\007\000\002\017\011\000\002\017\007\000\002" +
    "\017\004\000\002\017\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\022\005\000\002\022\006" +
    "\000\002\022\006\000\002\022\010\000\002\027\003\000" +
    "\002\027\005\000\002\026\003\000\002\026\003\000\002" +
    "\023\003\000\002\023\006\000\002\024\003\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\025\004\000\002\025\004\000" +
    "\002\025\005\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\007\005\001\002\000\004\002\235\001" +
    "\002\000\004\055\006\001\002\000\004\021\007\001\002" +
    "\000\012\004\012\013\011\015\013\022\015\001\002\000" +
    "\004\055\224\001\002\000\004\055\uffe4\001\002\000\004" +
    "\055\uffe3\001\002\000\004\055\214\001\002\000\012\004" +
    "\012\013\011\015\013\022\211\001\002\000\004\002\001" +
    "\001\002\000\012\004\ufff4\013\ufff4\015\ufff4\022\ufff4\001" +
    "\002\000\012\004\ufffb\013\ufffb\015\ufffb\022\ufffb\001\002" +
    "\000\012\004\012\013\011\015\013\022\022\001\002\000" +
    "\004\055\024\001\002\000\004\002\ufffe\001\002\000\012" +
    "\004\ufff5\013\ufff5\015\ufff5\022\ufff5\001\002\000\004\017" +
    "\025\001\002\000\010\004\012\013\011\020\027\001\002" +
    "\000\004\055\207\001\002\000\004\021\035\001\002\000" +
    "\006\020\uffef\026\uffef\001\002\000\006\020\033\026\032" +
    "\001\002\000\006\004\012\013\011\001\002\000\004\021" +
    "\035\001\002\000\012\004\ufff1\013\ufff1\015\ufff1\022\ufff1" +
    "\001\002\000\030\004\012\005\051\006\036\010\040\012" +
    "\046\013\011\014\044\016\042\021\035\022\054\055\045" +
    "\001\002\000\004\017\172\001\002\000\004\025\167\001" +
    "\002\000\004\027\166\001\002\000\030\004\012\005\051" +
    "\006\036\010\040\012\046\013\011\014\044\016\042\021" +
    "\035\022\162\055\045\001\002\000\004\017\154\001\002" +
    "\000\024\005\051\006\036\010\040\012\046\014\044\016" +
    "\042\021\035\022\153\055\045\001\002\000\024\006\036" +
    "\017\066\027\147\030\076\032\065\051\071\052\067\053" +
    "\075\055\045\001\002\000\060\017\135\020\uffce\023\136" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\001\002\000\004\017\064\001\002\000\004\055\060" +
    "\001\002\000\024\005\uffd7\006\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\021\uffd7\022\uffd7\055\uffd7\001\002\000\004" +
    "\027\056\001\002\000\004\027\055\001\002\000\024\005" +
    "\uffe2\006\uffe2\010\uffe2\012\uffe2\014\uffe2\016\uffe2\021\uffe2" +
    "\022\uffe2\055\uffe2\001\002\000\034\004\uffec\005\uffec\006" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\021\uffec\022\uffec\055\uffec\001\002\000\024\005" +
    "\uffdf\006\uffdf\010\uffdf\012\uffdf\014\uffdf\016\uffdf\021\uffdf" +
    "\022\uffdf\055\uffdf\001\002\000\024\005\uffd9\006\uffd9\010" +
    "\uffd9\012\uffd9\014\uffd9\016\uffd9\021\uffd9\022\uffd9\055\uffd9" +
    "\001\002\000\006\026\061\027\062\001\002\000\006\026" +
    "\uffe6\027\uffe6\001\002\000\004\055\063\001\002\000\030" +
    "\004\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\016\uffe8\021\uffe8\022\uffe8\055\uffe8\001\002\000\006" +
    "\026\uffe5\027\uffe5\001\002\000\022\006\036\017\066\030" +
    "\076\032\065\051\071\052\067\053\075\055\045\001\002" +
    "\000\022\006\036\017\066\030\076\032\065\051\071\052" +
    "\067\053\075\055\045\001\002\000\022\006\036\017\066" +
    "\030\076\032\065\051\071\052\067\053\075\055\045\001" +
    "\002\000\052\020\uffae\024\uffae\026\uffae\027\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\047\uffae\050\uffae\001\002\000\052\020\uffc8\024\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\001\002\000\052" +
    "\020\uffaf\024\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\001\002\000\044\020\126\031\103\032\115\033\100" +
    "\034\114\035\111\036\121\037\117\040\122\041\124\042" +
    "\110\043\116\044\120\045\105\046\107\047\102\050\104" +
    "\001\002\000\052\020\uffca\024\uffca\026\uffca\027\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\001\002\000\052\020\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000" +
    "\052\020\uffad\024\uffad\026\uffad\027\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\001\002\000\022\006\036\017\066\030\076\032" +
    "\065\051\071\052\067\053\075\055\045\001\002\000\052" +
    "\020\uffc5\024\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\001\002\000\022\006\uffbd\017\uffbd\030\uffbd\032\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\055\uffbd\001\002\000\022\006" +
    "\036\017\066\030\076\032\065\051\071\052\067\053\075" +
    "\055\045\001\002\000\022\006\uffb1\017\uffb1\030\uffb1\032" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\001\002\000\022" +
    "\006\uffbf\017\uffbf\030\uffbf\032\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\055\uffbf\001\002\000\022\006\uffb0\017\uffb0\030\uffb0" +
    "\032\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\001\002\000" +
    "\022\006\uffb3\017\uffb3\030\uffb3\032\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\055\uffb3\001\002\000\022\006\uffc1\017\uffc1\030" +
    "\uffc1\032\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\001\002" +
    "\000\022\006\uffb2\017\uffb2\030\uffb2\032\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\055\uffb2\001\002\000\022\006\uffb6\017\uffb6" +
    "\030\uffb6\032\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\001" +
    "\002\000\022\006\uffbb\017\uffbb\030\uffbb\032\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\055\uffbb\001\002\000\022\006\uffc0\017" +
    "\uffc0\030\uffc0\032\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\001\002\000\022\006\uffc2\017\uffc2\030\uffc2\032\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\055\uffc2\001\002\000\022\006\uffbc" +
    "\017\uffbc\030\uffbc\032\uffbc\051\uffbc\052\uffbc\053\uffbc\055" +
    "\uffbc\001\002\000\022\006\uffbe\017\uffbe\030\uffbe\032\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\055\uffbe\001\002\000\022\006" +
    "\uffb5\017\uffb5\030\uffb5\032\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\055\uffb5\001\002\000\022\006\uffb9\017\uffb9\030\uffb9\032" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\001\002\000\022" +
    "\006\uffb4\017\uffb4\030\uffb4\032\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\055\uffb4\001\002\000\022\006\uffba\017\uffba\030\uffba" +
    "\032\uffba\051\uffba\052\uffba\053\uffba\055\uffba\001\002\000" +
    "\022\006\uffb8\017\uffb8\030\uffb8\032\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\055\uffb8\001\002\000\022\006\uffc3\017\uffc3\030" +
    "\uffc3\032\uffc3\051\uffc3\052\uffc3\053\uffc3\055\uffc3\001\002" +
    "\000\022\006\uffb7\017\uffb7\030\uffb7\032\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\055\uffb7\001\002\000\052\020\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\031\103\032\115\033\100\034\114\035" +
    "\111\036\121\037\117\040\122\041\124\042\110\043\116" +
    "\044\120\045\105\046\107\047\102\050\104\001\002\000" +
    "\004\021\035\001\002\000\026\005\uffde\006\uffde\010\uffde" +
    "\011\130\012\uffde\014\uffde\016\uffde\021\uffde\022\uffde\055" +
    "\uffde\001\002\000\004\021\035\001\002\000\024\005\uffdd" +
    "\006\uffdd\010\uffdd\012\uffdd\014\uffdd\016\uffdd\021\uffdd\022" +
    "\uffdd\055\uffdd\001\002\000\044\020\133\031\103\032\115" +
    "\033\100\034\114\035\111\036\121\037\117\040\122\041" +
    "\124\042\110\043\116\044\120\045\105\046\107\047\102" +
    "\050\104\001\002\000\052\020\uffc4\024\uffc4\026\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000\052\020\uffc6" +
    "\024\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\100\034" +
    "\114\035\111\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001" +
    "\002\000\024\006\036\017\066\020\141\030\076\032\065" +
    "\051\071\052\067\053\075\055\045\001\002\000\022\006" +
    "\036\017\066\030\076\032\065\051\071\052\067\053\075" +
    "\055\045\001\002\000\044\024\140\031\103\032\115\033" +
    "\100\034\114\035\111\036\121\037\117\040\122\041\124" +
    "\042\110\043\116\044\120\045\105\046\107\047\102\050" +
    "\104\001\002\000\054\020\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\052\020" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\001\002\000\046\020\uffcc\026\uffcc\031\103\032\115\033" +
    "\100\034\114\035\111\036\121\037\117\040\122\041\124" +
    "\042\110\043\116\044\120\045\105\046\107\047\102\050" +
    "\104\001\002\000\006\020\145\026\144\001\002\000\022" +
    "\006\036\017\066\030\076\032\065\051\071\052\067\053" +
    "\075\055\045\001\002\000\052\020\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002\000\046\020" +
    "\uffcb\026\uffcb\031\103\032\115\033\100\034\114\035\111" +
    "\036\121\037\117\040\122\041\124\042\110\043\116\044" +
    "\120\045\105\046\107\047\102\050\104\001\002\000\024" +
    "\005\uffdb\006\uffdb\010\uffdb\012\uffdb\014\uffdb\016\uffdb\021" +
    "\uffdb\022\uffdb\055\uffdb\001\002\000\044\027\151\031\103" +
    "\032\115\033\100\034\114\035\111\036\121\037\117\040" +
    "\122\041\124\042\110\043\116\044\120\045\105\046\107" +
    "\047\102\050\104\001\002\000\024\005\uffda\006\uffda\010" +
    "\uffda\012\uffda\014\uffda\016\uffda\021\uffda\022\uffda\055\uffda" +
    "\001\002\000\024\005\uffe1\006\uffe1\010\uffe1\012\uffe1\014" +
    "\uffe1\016\uffe1\021\uffe1\022\uffe1\055\uffe1\001\002\000\034" +
    "\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\021\uffea\022\uffea\055\uffea" +
    "\001\002\000\022\006\036\017\066\030\076\032\065\051" +
    "\071\052\067\053\075\055\045\001\002\000\044\020\156" +
    "\031\103\032\115\033\100\034\114\035\111\036\121\037" +
    "\117\040\122\041\124\042\110\043\116\044\120\045\105" +
    "\046\107\047\102\050\104\001\002\000\004\021\035\001" +
    "\002\000\024\005\uffdc\006\uffdc\010\uffdc\012\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\055\uffdc\001\002\000\004\055" +
    "\060\001\002\000\024\005\051\006\036\010\040\012\046" +
    "\014\044\016\042\021\035\022\163\055\045\001\002\000" +
    "\034\004\uffeb\005\uffeb\006\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\055" +
    "\uffeb\001\002\000\034\004\uffe9\005\uffe9\006\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\021" +
    "\uffe9\022\uffe9\055\uffe9\001\002\000\006\026\061\027\165" +
    "\001\002\000\030\004\uffe7\005\uffe7\006\uffe7\010\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\016\uffe7\021\uffe7\022\uffe7\055\uffe7" +
    "\001\002\000\024\005\uffd8\006\uffd8\010\uffd8\012\uffd8\014" +
    "\uffd8\016\uffd8\021\uffd8\022\uffd8\055\uffd8\001\002\000\022" +
    "\006\036\017\066\030\076\032\065\051\071\052\067\053" +
    "\075\055\045\001\002\000\044\027\171\031\103\032\115" +
    "\033\100\034\114\035\111\036\121\037\117\040\122\041" +
    "\124\042\110\043\116\044\120\045\105\046\107\047\102" +
    "\050\104\001\002\000\024\005\uffe0\006\uffe0\010\uffe0\012" +
    "\uffe0\014\uffe0\016\uffe0\021\uffe0\022\uffe0\055\uffe0\001\002" +
    "\000\004\054\173\001\002\000\006\020\175\026\174\001" +
    "\002\000\024\006\036\017\066\030\076\032\065\051\071" +
    "\052\067\053\075\054\177\055\045\001\002\000\052\020" +
    "\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\001\002\000\006\020\uffd2\026\uffd2\001\002\000\006\020" +
    "\uffcf\026\uffcf\001\002\000\046\020\uffd0\026\uffd0\031\103" +
    "\032\115\033\100\034\114\035\111\036\121\037\117\040" +
    "\122\041\124\042\110\043\116\044\120\045\105\046\107" +
    "\047\102\050\104\001\002\000\006\020\203\026\202\001" +
    "\002\000\024\006\036\017\066\030\076\032\065\051\071" +
    "\052\067\053\075\054\177\055\045\001\002\000\052\020" +
    "\uffd3\024\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\001\002\000\006\020\uffd1\026\uffd1\001\002\000\006\020" +
    "\uffee\026\uffee\001\002\000\012\004\ufff3\013\ufff3\015\ufff3" +
    "\022\ufff3\001\002\000\006\020\uffed\026\uffed\001\002\000" +
    "\012\004\012\013\011\015\013\022\213\001\002\000\004" +
    "\002\uffff\001\002\000\012\004\ufffc\013\ufffc\015\ufffc\022" +
    "\ufffc\001\002\000\004\002\ufffd\001\002\000\004\017\215" +
    "\001\002\000\010\004\012\013\011\020\216\001\002\000" +
    "\004\021\035\001\002\000\006\020\220\026\032\001\002" +
    "\000\004\021\035\001\002\000\012\004\ufff0\013\ufff0\015" +
    "\ufff0\022\ufff0\001\002\000\012\004\ufff2\013\ufff2\015\ufff2" +
    "\022\ufff2\001\002\000\006\026\ufff8\027\ufff8\001\002\000" +
    "\012\017\025\023\232\026\ufff7\027\ufff7\001\002\000\006" +
    "\026\226\027\227\001\002\000\004\055\231\001\002\000" +
    "\012\004\ufffa\013\ufffa\015\ufffa\022\ufffa\001\002\000\006" +
    "\026\ufff9\027\ufff9\001\002\000\010\023\232\026\ufff7\027" +
    "\ufff7\001\002\000\004\051\233\001\002\000\004\024\234" +
    "\001\002\000\006\026\ufff6\027\ufff6\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\013\005\016" +
    "\010\017\011\015\021\007\001\001\000\006\006\224\007" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\211\010\207\011\015\021\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\022\021\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\030\013\027\021\025\001\001\000\002\001\001\000" +
    "\004\020\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\204\021\025\001\001\000\004\020\033\001" +
    "\001\000\002\001\001\000\020\014\040\016\042\017\052" +
    "\020\047\021\046\022\051\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\160" +
    "\017\052\020\047\021\157\022\051\023\036\001\001\000" +
    "\002\001\001\000\012\017\151\020\047\022\051\023\036" +
    "\001\001\000\012\022\073\023\072\025\147\030\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\022\073\023\072\025\071\030\067\001\001\000\012\022" +
    "\073\023\072\025\133\030\067\001\001\000\012\022\073" +
    "\023\072\025\131\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\100\032\122" +
    "\033\112\034\105\035\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\073\023\072" +
    "\025\076\030\067\001\001\000\014\031\100\032\122\033" +
    "\112\034\105\035\111\001\001\000\002\001\001\000\012" +
    "\022\073\023\072\025\124\030\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\100\032" +
    "\122\033\112\034\105\035\111\001\001\000\004\020\126" +
    "\001\001\000\002\001\001\000\004\020\130\001\001\000" +
    "\002\001\001\000\014\031\100\032\122\033\112\034\105" +
    "\035\111\001\001\000\002\001\001\000\014\031\100\032" +
    "\122\033\112\034\105\035\111\001\001\000\014\022\073" +
    "\023\072\024\142\025\141\030\067\001\001\000\012\022" +
    "\073\023\072\025\136\030\067\001\001\000\014\031\100" +
    "\032\122\033\112\034\105\035\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\031\100\032\122\033\112" +
    "\034\105\035\111\001\001\000\002\001\001\000\012\022" +
    "\073\023\072\025\145\030\067\001\001\000\002\001\001" +
    "\000\014\031\100\032\122\033\112\034\105\035\111\001" +
    "\001\000\002\001\001\000\014\031\100\032\122\033\112" +
    "\034\105\035\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\073\023\072\025\154" +
    "\030\067\001\001\000\014\031\100\032\122\033\112\034" +
    "\105\035\111\001\001\000\004\020\156\001\001\000\002" +
    "\001\001\000\004\015\163\001\001\000\012\017\151\020" +
    "\047\022\051\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\073\023\072\025\167\030\067\001\001" +
    "\000\014\031\100\032\122\033\112\034\105\035\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\073\023\072\025\177\026\175\027\200\030" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\031\100\032\122\033\112\034\105\035" +
    "\111\001\001\000\002\001\001\000\014\022\073\023\072" +
    "\025\177\026\203\030\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\022\021\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\216\013\027\021\025\001\001\000\004\020" +
    "\221\001\001\000\002\001\001\000\004\020\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DecafParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DecafParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DecafParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	@Override
	public final void report_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void report_fatal_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void syntax_error(final Symbol currentToken) {
		Tools.debugPrint(currentToken);
		Tools.debugPrint(this.stack);
		
		final Yylex scanner = (Yylex) this.getScanner();
		
		scanner.updateLocation();
		
		int row = scanner.getCurrentRow();
		int column = scanner.getCurrentColumn();
		String errorMessage = "Parse error";
		
		for (final Object symbol : this.stack) {
			switch (((Symbol) symbol).sym) {
			case DecafParserSymbols.LEFT_PARENTHESIS:
				errorMessage = "Missing \")\"";
				break;
			case DecafParserSymbols.LEFT_BRACE:
				errorMessage = "Missing \"}\"";
				break;
			case DecafParserSymbols.LEFT_BRACKET:
				errorMessage = "Missing \"]\"";
				break;
			default:
				break;
			}
		}
		
		final DecafToken token = Tools.cast(DecafToken.class, currentToken);
		
		if (token != null) {
			row = token.getRow();
			column = token.getColumn();
			
			errorMessage = "Unexpected \"" + token.getInputString() + "\"";
		}
		
		throw new RuntimeException("(:" + row + ":" + column + ") " + errorMessage);
	}
	
	@Override
	public final void unrecovered_syntax_error(final Symbol currentToken) {
		Tools.debugPrint(currentToken);
		
		final DecafToken lastToken = (DecafToken) currentToken;
		
		throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Parse error");
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DecafParser$actions {
  private final DecafParser parser;

  /** Constructor */
  CUP$DecafParser$actions(DecafParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DecafParser$do_action(
    int                        CUP$DecafParser$act_num,
    java_cup.runtime.lr_parser CUP$DecafParser$parser,
    java.util.Stack            CUP$DecafParser$stack,
    int                        CUP$DecafParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DecafParser$result;

      /* select the action based on the action number */
      switch (CUP$DecafParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Literal ::= CHAR_LITERAL 
            {
              AbstractLiteral RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new CharLiteral(value);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Literal ::= BOOLEAN_LITERAL 
            {
              AbstractLiteral RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new BooleanLiteral(value);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Literal ::= INT_LITERAL 
            {
              AbstractLiteral RESULT = null;
		int representationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int representationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String representation = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		if (representation.startsWith("0x")) {
			RESULT = new IntLiteral(Integer.parseInt(representation.substring(2), 16));
		} else {
			RESULT = new IntLiteral(Integer.parseInt(representation));
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(22/*Literal*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ConditionalOperator ::= OR 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*ConditionalOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ConditionalOperator ::= AND 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(27/*ConditionalOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EqualityOperator ::= NOT_EQUAL 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqualityOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EqualityOperator ::= EQUAL 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(26/*EqualityOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelationOperator ::= GREATER_OR_EQUAL 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelationOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelationOperator ::= LESS_OR_EQUAL 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelationOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelationOperator ::= GREATER 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelationOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelationOperator ::= LESS 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(25/*RelationOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArithmeticOperator ::= BITWISE_ROTATE_RIGHT 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArithmeticOperator ::= ARITHMETIC_SHIFT_RIGHT 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArithmeticOperator ::= ARITHMETIC_SHIFT_LEFT 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArithmeticOperator ::= MODULO 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArithmeticOperator ::= DIVIDE 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ArithmeticOperator ::= TIMES 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ArithmeticOperator ::= MINUS 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ArithmeticOperator ::= PLUS 
            {
              String RESULT = null;
		
		RESULT = ((DecafToken) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top)).getInputString();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(24/*ArithmeticOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BinaryOperator ::= ConditionalOperator 
            {
              String RESULT = null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = operator;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinaryOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BinaryOperator ::= EqualityOperator 
            {
              String RESULT = null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = operator;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinaryOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BinaryOperator ::= RelationOperator 
            {
              String RESULT = null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = operator;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinaryOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BinaryOperator ::= ArithmeticOperator 
            {
              String RESULT = null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = operator;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(23/*BinaryOperator*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expression ::= LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS 
            {
              AbstractExpression RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expression ::= NOT Expression 
            {
              AbstractExpression RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expression ::= MINUS Expression 
            {
              AbstractExpression RESULT = null;

              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expression ::= Expression BinaryOperator Expression 
            {
              AbstractExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression left = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		String operator = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression right = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new BinaryOperation(left, operator, right);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= Literal 
            {
              AbstractExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractLiteral literal = (AbstractLiteral)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new LiteralExpression(literal);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= MethodCall 
            {
              AbstractExpression RESULT = null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractMethodCall methodCall = (AbstractMethodCall)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodCallExpression(methodCall);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= Location 
            {
              AbstractExpression RESULT = null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractLocation location = (AbstractLocation)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new LocationExpression(location);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(19/*Expression*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expressions ::= Expressions COMMA Expression 
            {
              List RESULT = null;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List expressions = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractExpression>(expressions);
		
		RESULT.add(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Expressions*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expressions ::= Expression 
            {
              List RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractExpression>();
		
		RESULT.add(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(18/*Expressions*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Location ::= IDENTIFIER LEFT_BRACKET Expression RIGHT_BRACKET 
            {
              AbstractLocation RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayLocation(identifier, expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Location ::= IDENTIFIER 
            {
              AbstractLocation RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new IdentifierLocation(identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(17/*Location*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CalloutArg ::= STRING_LITERAL 
            {
              AbstractCalloutArgument RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new CalloutArgumentStringLiteral((String)stringLiteral);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CalloutArg ::= Expression 
            {
              AbstractCalloutArgument RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new CalloutArgumentExpression(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(20/*CalloutArg*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CalloutArgs ::= CalloutArgs COMMA CalloutArg 
            {
              List RESULT = null;
		int calloutArgsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int calloutArgsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List calloutArgs = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int calloutArgleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int calloutArgright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractCalloutArgument calloutArg = (AbstractCalloutArgument)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractCalloutArgument>(calloutArgs);
		
		RESULT.add(calloutArg);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CalloutArgs ::= CalloutArg 
            {
              List RESULT = null;
		int calloutArgleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int calloutArgright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractCalloutArgument calloutArg = (AbstractCalloutArgument)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractCalloutArgument>();
		
		RESULT.add(calloutArg);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(21/*CalloutArgs*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL COMMA CalloutArgs RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int calloutArgsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int calloutArgsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List calloutArgs = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallout((String)stringLiteral, calloutArgs);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodCall ::= CALLOUT LEFT_PARENTHESIS STRING_LITERAL RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallout((String)stringLiteral, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS Expressions RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int expressionsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List expressions = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCall(identifier, expressions);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodCall ::= IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS 
            {
              AbstractMethodCall RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		
		RESULT = new MethodCall(identifier, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(16/*MethodCall*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statement ::= Block 
            {
              AbstractStatement RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new BlockStatement(block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= CONTINUE SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new ContinueStatement();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= BREAK SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new BreakStatement();
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= RETURN Expression SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ReturnStatement(expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= RETURN SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		
		RESULT = new ReturnStatement(null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= WHILE LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new WhileStatement(expression, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block ELSE Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int thenBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int thenBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Block thenBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block elseBlock = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new IfStatement(expression, thenBlock, elseBlock);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= IF LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS Block 
            {
              AbstractStatement RESULT = null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new IfStatement(expression, block, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= MethodCall SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		int methodCallleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodCallright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractMethodCall methodCall = (AbstractMethodCall)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new MethodCallStatement(methodCall);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= Location ASSIGN Expression SEMI_COLON 
            {
              AbstractStatement RESULT = null;
		int locationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int locationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		AbstractLocation location = (AbstractLocation)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		AbstractExpression expression = (AbstractExpression)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new LocationStatement(location, expression);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statements ::= Statements Statement 
            {
              List RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractStatement statement = (AbstractStatement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractStatement>(statements);
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statements ::= Statement 
            {
              List RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		AbstractStatement statement = (AbstractStatement)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<AbstractStatement>();
		
		RESULT.add(statement);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(12/*Statements*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= BOOLEAN 
            {
              Class RESULT = null;
		
		RESULT = boolean.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= INT 
            {
              Class RESULT = null;
		
		RESULT = int.class;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(15/*Type*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdentifierList ::= IdentifierList COMMA IDENTIFIER 
            {
              List RESULT = null;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>(identifierList);
		
		RESULT.add(identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdentifierList ::= IDENTIFIER 
            {
              List RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>();
		
		RESULT.add(identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(11/*IdentifierList*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableDeclarations ::= VariableDeclarations Type IdentifierList SEMI_COLON 
            {
              List RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<VariableDeclaration>(variableDeclarations);
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}
		
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableDeclarations ::= Type IdentifierList SEMI_COLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int identifierListleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int identifierListright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List identifierList = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}

	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(10/*VariableDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Block ::= LEFT_BRACE VariableDeclarations Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Block ::= LEFT_BRACE Statements RIGHT_BRACE 
            {
              Block RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(null, statements);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Block ::= LEFT_BRACE VariableDeclarations RIGHT_BRACE 
            {
              Block RESULT = null;
		int variableDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int variableDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List variableDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Block(variableDeclarations, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Block ::= LEFT_BRACE RIGHT_BRACE 
            {
              Block RESULT = null;
		
		RESULT = new Block(null, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(14/*Block*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParameterDeclaration ::= Type IDENTIFIER 
            {
              FieldDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new FieldDeclaration(type, identifier);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(9/*ParameterDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParameterDeclarations ::= ParameterDeclarations COMMA ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		FieldDeclaration parameterDeclaration = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(parameterDeclarations);
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ParameterDeclarations ::= ParameterDeclaration 
            {
              List RESULT = null;
		int parameterDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int parameterDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		FieldDeclaration parameterDeclaration = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		RESULT.add(parameterDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(8/*ParameterDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(void.class, identifier, parameterDeclarations, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int parameterDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int parameterDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List parameterDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(type, identifier, parameterDeclarations, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodDeclaration ::= VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(void.class, identifier, null, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodDeclaration ::= Type IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS Block 
            {
              MethodDeclaration RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int blockleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new MethodDeclaration(type, identifier, null, block);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(7/*MethodDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodDeclarations ::= MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>();
		
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclarations ::= MethodDeclarations MethodDeclaration 
            {
              List RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int methodDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int methodDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		MethodDeclaration methodDeclaration = (MethodDeclaration)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<Object>(methodDeclarations);
		
		RESULT.add(methodDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(6/*MethodDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Field ::= IDENTIFIER LEFT_BRACKET INT_LITERAL RIGHT_BRACKET 
            {
              String RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).value;
		int elementCountleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int elementCountright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		String elementCount = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = identifier + " " + elementCount;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= IDENTIFIER 
            {
              String RESULT = null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = identifier;
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(5/*Field*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Fields ::= Field 
            {
              List RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>();
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Fields ::= Fields COMMA Field 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<String>(fields);
		
		RESULT.add(field);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(4/*Fields*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FieldDeclaration ::= Type Fields SEMI_COLON 
            {
              List RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		Class type = (Class)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object field : fields) {
			final String[] fieldElements = ((String) field).split(" ");
			
			switch (fieldElements.length) {
			case 1:
				RESULT.add(new FieldDeclaration(type, fieldElements[0]));
				break;
			case 2:
				RESULT.add(new ArrayFieldDeclaration(type, fieldElements[0], Integer.parseInt(fieldElements[1])));
				break;
			default:
				throw new IllegalArgumentException("" + field);
			}
		}
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(3/*FieldDeclaration*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FieldDeclarations ::= FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              List RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		int fieldDeclarationleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).left;
		int fieldDeclarationright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right;
		List fieldDeclaration = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).value;
		
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclarations);
		
		RESULT.addAll(fieldDeclaration);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(2/*FieldDeclarations*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-2)).value;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(fieldDeclarations, methodDeclarations);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= CLASS IDENTIFIER LEFT_BRACE MethodDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int methodDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int methodDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List methodDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(null, methodDeclarations);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= CLASS IDENTIFIER LEFT_BRACE FieldDeclarations RIGHT_BRACE 
            {
              Program RESULT = null;
		int fieldDeclarationsleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int fieldDeclarationsright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		List fieldDeclarations = (List)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		
		RESULT = new Program(fieldDeclarations, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).value;
		RESULT = start_val;
              CUP$DecafParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$DecafParser$parser.done_parsing();
          return CUP$DecafParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE 
            {
              Program RESULT = null;
		
		RESULT = new Program(null, null);
	
              CUP$DecafParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$DecafParser$stack.elementAt(CUP$DecafParser$top-0)).right, RESULT);
            }
          return CUP$DecafParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

