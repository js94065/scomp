package scomp;

import java.util.*;

import java_cup.runtime.*;


action code 
{:
	
	/**
	 * @param stack
	 * <br>Not null
	 * @param top
	 * <br>Range: {@code [0 .. stack.size() - 1]}
	 * @param tokenRepresentation
	 * <br>Not null
	 * @throws RuntimeException
	 */
	public final void missingTokenAfter(final Stack stack, final int top, final Object tokenRepresentation) {
		Tools.debugPrint(stack.elementAt(top));
		
		final DecafToken lastToken = (DecafToken) stack.elementAt(top - 0);
		
		throw new RuntimeException("(:" + lastToken.getRow() + ":" + (lastToken.getColumn() + lastToken.getInputString().length()) + ") Missing \"" + tokenRepresentation + "\"");
	}
	
	/**
	 * @param stack
	 * <br>Not null
	 * @param top
	 * <br>Range: {@code [0 .. stack.size() - 1]}
	 * @param tokenRepresentation
	 * <br>Not null
	 * @throws RuntimeException
	 */
	public final void missingTokenBefore(final Stack stack, final int top, final Object tokenRepresentation) {
		Tools.debugPrint(stack.elementAt(top));
		
		final DecafToken lastToken = (DecafToken) stack.elementAt(top - 0);
		
		throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Missing \"" + tokenRepresentation + "\"");
	}
	
	/**
	 * @param stack
	 * <br>Not null
	 * @param top
	 * <br>Range: {@code [0 .. stack.size() - 1]}
	 * @throws RuntimeException
	 */
	public final void parseError(final Stack stack, final int top) {
		Tools.debugPrint(stack.elementAt(top));
		
		final DecafToken lastToken = (DecafToken) stack.elementAt(top - 0);
		
		throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Parse error");
	}
	
	/**
	 * @throws RuntimeException
	 */
	public final void parseErrorEndOfFile() {
		final Yylex scanner = (Yylex) this.parser.getScanner();
		
		throw new RuntimeException("(:" + scanner.getCurrentRow() + ":" + scanner.getCurrentColumn() + ") Parse error");
	}
	
:}

parser code
{:
	
	@Override
	public final void report_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void report_fatal_error(final String message, final Object info) {
		Tools.debugPrint(message, info);
	}
	
	@Override
	public final void syntax_error(final Symbol currentToken) {
		Tools.debugPrint(currentToken);
		
		final DecafToken token = (DecafToken) currentToken;
		
		if (")".equals(token.getInputString())) {
			throw new RuntimeException("(:" + token.getRow() + ":" + token.getColumn() + ") Unmatched \")\"");
		}
	}
	
	@Override
	public final void unrecovered_syntax_error(final Symbol currentToken) {
		Tools.debugPrint(currentToken);
		
		final DecafToken lastToken = (DecafToken) currentToken;
		
		throw new RuntimeException("(:" + lastToken.getRow() + ":" + lastToken.getColumn() + ") Parse error");
	}
	
:}

terminal BOOLEAN, BREAK, CALLOUT, CLASS, CONTINUE, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET;
terminal ASSIGN; // "=", not to be confused with "=="  which is EQUAL
terminal COMMA, SEMI_COLON, NOT, PLUS, MINUS, TIMES, DIVIDE, MODULO;
terminal ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
terminal LESSER, GREATER, LESSER_OR_EQUAL, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL, AND, OR;
terminal INT_LITERAL;
terminal BOOLEAN_LITERAL;
terminal CHAR_LITERAL;
terminal STRING_LITERAL;
terminal String IDENTIFIER;

non terminal Program Program;
non terminal List FieldDeclarations;
non terminal List FieldDeclaration;
non terminal List Fields;
non terminal String Field;
non terminal List MethodDeclarations;
non terminal MethodDeclaration MethodDeclaration;
non terminal List ParameterDeclarations;
non terminal FieldDeclaration ParameterDeclaration;
non terminal List VariableDeclarations;
non terminal List IdentifierList;
non terminal List Statements;
non terminal Statement Statement;
non terminal Block Block;
non terminal Class Type;
non terminal MethodCall MethodCall;
non terminal Location Location;
non terminal List Expressions;
non terminal Expression Expression;
non terminal CalloutArg;
non terminal List CalloutArgs;
non terminal Literal Literal;
non terminal BinOp, ArithOp, RelOp, EqOp, CondOp;
non terminal UnexpectedToken;

precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LESSER, GREATER, LESSER_OR_EQUAL, GREATER_OR_EQUAL;
precedence left ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence left NOT;

Program ::=
	CLASS IDENTIFIER LEFT_BRACE RIGHT_BRACE
	{:
		RESULT = new Program(null, null);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(fieldDeclarations, null);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(null, methodDeclarations);
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations:fieldDeclarations MethodDeclarations:methodDeclarations RIGHT_BRACE
	{:
		RESULT = new Program(fieldDeclarations, methodDeclarations);
	:}
	|
	{:
		this.parseErrorEndOfFile();
	:}
	|
	CLASS
	{:
		this.parseError(CUP$DecafParser$stack, CUP$DecafParser$top);
	:}
	|
	CLASS IDENTIFIER 
	{:
		this.missingTokenAfter(CUP$DecafParser$stack, CUP$DecafParser$top, '{');
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE 
	{:
		this.missingTokenAfter(CUP$DecafParser$stack, CUP$DecafParser$top, '}');
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations
	{:
		this.missingTokenAfter(CUP$DecafParser$stack, CUP$DecafParser$top, '}');
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE MethodDeclarations
	{:
		this.missingTokenAfter(CUP$DecafParser$stack, CUP$DecafParser$top, '}');
	:}
	|
	CLASS IDENTIFIER LEFT_BRACE FieldDeclarations MethodDeclarations
	{:
		this.missingTokenAfter(CUP$DecafParser$stack, CUP$DecafParser$top, '}');
	:}
	;

FieldDeclarations ::=
	FieldDeclarations:fieldDeclarations FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclarations);
		
		RESULT.addAll(fieldDeclaration);
	:}
	|
	FieldDeclaration:fieldDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>(fieldDeclaration);
	:}
	;

FieldDeclaration ::=
	Type:type Fields:fields SEMI_COLON
	{:
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object field : fields) {
			final String[] fieldElements = ((String) field).split(" ");
			
			switch (fieldElements.length) {
			case 1:
				RESULT.add(new FieldDeclaration(type, fieldElements[0]));
				break;
			case 2:
				RESULT.add(new ArrayFieldDeclaration(type, fieldElements[0], Integer.parseInt(fieldElements[1])));
				break;
			default:
				throw new IllegalArgumentException("" + field);
			}
		}
	:}
	;

Fields ::=
	Fields:fields COMMA Field:field
	{:
		RESULT = new ArrayList<String>(fields);
		
		RESULT.add(field);
	:}
	|
	Field:field
	{:
		RESULT = new ArrayList<String>();
		
		RESULT.add(field);
	:}
	/*
	|
	Fields COMMA error // missing Field
	|
	error COMMA Field // missing Fields
	|
	error Field // missing COMMA
	*/
	;

Field ::=
	IDENTIFIER:identifier
	{:
		RESULT = identifier;
	:}
	|
	IDENTIFIER:identifier LEFT_BRACKET INT_LITERAL:elementCount RIGHT_BRACKET
	{:
		RESULT = identifier + " " + elementCount;
	:}
	|
	error LEFT_BRACKET INT_LITERAL RIGHT_BRACKET // missing IDENTIFIER
	|
	IDENTIFIER error INT_LITERAL RIGHT_BRACKET // missing LEFT_BRACKET
	|
	IDENTIFIER LEFT_BRACKET error RIGHT_BRACKET // missing INT_LITERAL
	|
	IDENTIFIER LEFT_BRACKET INT_LITERAL error // missing RIGHT_BRACKET
	;

MethodDeclarations ::=
	MethodDeclarations:methodDeclarations MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>(methodDeclarations);
		RESULT.add(methodDeclaration);
	:}
	|
	MethodDeclaration:methodDeclaration
	{:
		RESULT = new ArrayList<Object>();
		RESULT.add(methodDeclaration);
	:}
	;

MethodDeclaration ::=
	Type:type IDENTIFIER:identifier LEFT_PARENTHESIS RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(type, identifier, null, block);
	:}
	|
	VOID IDENTIFIER:identifier LEFT_PARENTHESIS RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(void.class, identifier, null, block);
	:}
	|
	Type:type IDENTIFIER:identifier LEFT_PARENTHESIS ParameterDeclarations:parameterDeclarations RIGHT_PARENTHESIS Block:block 
	{:
		RESULT = new MethodDeclaration(type, identifier, parameterDeclarations, block);
	:}
	|
	VOID IDENTIFIER:identifier LEFT_PARENTHESIS ParameterDeclarations:parameterDeclarations RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new MethodDeclaration(void.class, identifier, parameterDeclarations, block);
	:}
	/*
	|
	// missing RIGHT_PARENTHESIS
	Type IDENTIFIER LEFT_PARENTHESIS Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS Block
	|
	Type IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations Block
	|
	VOID IDENTIFIER LEFT_PARENTHESIS ParameterDeclarations Block
	*/
	;
	
ParameterDeclarations ::= 
	ParameterDeclaration:parameterDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>();
		
		RESULT.add(parameterDeclaration);
	:}
	|
	ParameterDeclarations:parameterDeclarations COMMA ParameterDeclaration:parameterDeclaration
	{:
		RESULT = new ArrayList<FieldDeclaration>(parameterDeclarations);
		
		RESULT.add(parameterDeclaration);
	:}
	;
	
ParameterDeclaration ::=
	Type:type IDENTIFIER:identifier
	{:
		RESULT = new FieldDeclaration(type, identifier);
	:}
	;

Block ::=
	LEFT_BRACE RIGHT_BRACE
	|
	LEFT_BRACE VariableDeclarations:variableDeclarations RIGHT_BRACE
	{:
		RESULT = new Block(variableDeclarations, null);
	:}
	|
	LEFT_BRACE Statements:statements RIGHT_BRACE
	{:
		RESULT = new Block(null, statements);
	:}
	|
	LEFT_BRACE VariableDeclarations:variableDeclarations Statements:statements RIGHT_BRACE
	{:
		RESULT = new Block(variableDeclarations, statements);
	:}
	/*
	|
	// missing RIGHT_BRACE
	LEFT_BRACE error
	|
	LEFT_BRACE VariableDeclarations error
	|
	LEFT_BRACE Statements error
	|
	LEFT_BRACE VariableDeclarations Statements error
	*/
	;
	
VariableDeclarations ::=
	Type:type IdentifierList:identifierList SEMI_COLON
	{:
		RESULT = new ArrayList<FieldDeclaration>();
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}

	:}
	|
	VariableDeclarations:variableDeclarations Type:type IdentifierList:identifierList SEMI_COLON
	{:
		RESULT = new ArrayList<VariableDeclaration>(variableDeclarations);
		
		for (final Object identifier : identifierList) {
			RESULT.add(new VariableDeclaration(type, (String) identifier));
		}
		
	:}
	;
	
IdentifierList  ::=
	IDENTIFIER:identifier
	{:
		RESULT = new ArrayList<String>();
		
		RESULT.add(identifier);
	:}
	|
	IdentifierList:identifierList COMMA IDENTIFIER:identifier
	{:
		RESULT = new ArrayList<String>(identifierList);
		
		RESULT.add(identifier);
	:}
	;

Type ::=
	INT
	{:
		RESULT = int.class;
	:}
	|
	BOOLEAN
	{:
		RESULT = boolean.class;
	:}
	;
	
Statements ::=
	Statement:statement
	{:
		RESULT = new ArrayList<Statement>();
		
		RESULT.add(statement);
	:}
	|
	Statements:statements Statement:statement
	{:
		RESULT = new ArrayList<Statement>(statements);
		
		RESULT.add(statement);
	:}
	;

Statement ::=
	Location:location ASSIGN Expression:expression SEMI_COLON
	{:
		RESULT = new StatementLocation(location, expression);
	:}
	|
	MethodCall:methodCall SEMI_COLON
	{:
		RESULT = new StatementMethodCall(methodCall);
	:}
	|
	IF LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new StatementIf(expression, block, null);
	:}
	|
	IF LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:ifBlock ELSE Block:elseBlock
	{:
		RESULT = new StatementIf(expression, ifBlock, elseBlock);
	:}
	|
	WHILE LEFT_PARENTHESIS Expression:expression RIGHT_PARENTHESIS Block:block
	{:
		RESULT = new StatementWhile(expression, block);
	:}
	|
	RETURN SEMI_COLON
	{:
		RESULT = new StatementReturn(null);
	:}
	|
	RETURN Expression:expression SEMI_COLON
	{:
		RESULT = new StatementReturn(expression);
	:}
	|
	BREAK SEMI_COLON
	{:
		RESULT = new StatementBreak();
	:}
	|
	CONTINUE SEMI_COLON
	{:
		RESULT = new StatementContinue();
	:}
	|
	Block:block
	{:
		RESULT = new StatementBlock(block);
	:}
	;
	
MethodCall ::= 
	IDENTIFIER:identifier LEFT_PARENTHESIS RIGHT_PARENTHESIS
	{:
		RESULT = new MethodName(identifier,null);
	:}
	|
	IDENTIFIER:identifier LEFT_PARENTHESIS Expressions:expressions RIGHT_PARENTHESIS
	{:
		RESULT = new MethodName(identifier, expressions);
	:}
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL:stringLiteral RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCallout((String)stringLiteral, null);
	:}
	|
	CALLOUT LEFT_PARENTHESIS STRING_LITERAL:stringLiteral COMMA CalloutArgs:calloutArgs RIGHT_PARENTHESIS
	{:
		RESULT = new MethodCallout((String)stringLiteral, calloutArgs);
	:}
	;

CalloutArgs ::=
	CalloutArg:calloutArg
	{:
		RESULT = new ArrayList<CalloutArgument>();
		RESULT.add(calloutArg);
	:}
	|
	CalloutArgs:calloutArgs COMMA CalloutArg:calloutArg
	{:
		RESULT = new ArrayList<CalloutArgument>(calloutArgs);
		RESULT.add(calloutArg);
	:}
	;
	
CalloutArg ::=
	Expression:expression
	{:
		RESULT = new CalloutArgumentExpression(expression);
	:}
	|
	STRING_LITERAL:stringLiteral
	{:
		RESULT = new CalloutArgumentStringLiteral((String)stringLiteral);
	:}
	;

Location ::=
	IDENTIFIER:identifier
	{:
		RESULT = new LocationIdentifier(identifier);
	:}
	|
	IDENTIFIER:identifier LEFT_BRACKET Expression:expression RIGHT_BRACKET
	{:
		RESULT = new LocationOffset(identifier, expression);
	:}
	;

Expressions ::=
	Expression:expression
	{:
		RESULT = new ArrayList<Expression>();
		RESULT.add(expression);
	:}
	|
	Expressions:expressions COMMA Expression:expression
	{:
		RESULT = new ArrayList<Expression>(expressions);
		RESULT.add(expression);
	:}
	;

Expression ::=
	Location:location
	{:
		RESULT = new ExpressionLocation(location);
		Tools.debugPrint();
	:}
	|
	MethodCall:methodCall
	{:
		RESULT = new ExpressionMethodCall(methodCall);
		Tools.debugPrint();
	:}
	|
	Literal:literal
	{:
		RESULT = new ExpressionLiteral(literal);
		Tools.debugPrint();
	:}
	|
	Expression BinOp Expression
	{:
		Tools.debugPrint();
	:}
	|
	MINUS Expression
	{:
		Tools.debugPrint();
	:}
	|
	NOT Expression
	{:
		Tools.debugPrint();
	:}
	|
	LEFT_PARENTHESIS Expression RIGHT_PARENTHESIS
	{:
		Tools.debugPrint();
	:}
	|
	LEFT_PARENTHESIS Expression COMMA
	{:
		Tools.debugPrint();
		
		this.missingTokenBefore(CUP$DecafParser$stack, CUP$DecafParser$top, ')');
	:}
	|
	LEFT_PARENTHESIS Expression SEMI_COLON
	{:
		Tools.debugPrint();
		
		this.missingTokenBefore(CUP$DecafParser$stack, CUP$DecafParser$top, ')');
	:}
	|
	LEFT_PARENTHESIS Expression RIGHT_BRACE
	{:
		Tools.debugPrint();
		
		this.missingTokenBefore(CUP$DecafParser$stack, CUP$DecafParser$top, ')');
	:}
	;

BinOp ::=
	ArithOp
	|
	RelOp
	|
	EqOp
	|
	CondOp
	;

ArithOp ::=
	PLUS
	|
	MINUS
	|
	TIMES
	|
	DIVIDE
	|
	MODULO
	|
	ARITHMETIC_SHIFT_LEFT
	|
	ARITHMETIC_SHIFT_RIGHT
	|
	BITWISE_ROTATE_RIGHT
	;

RelOp ::=
	LESSER
	|
	GREATER
	|
	LESSER_OR_EQUAL
	|
	GREATER_OR_EQUAL
	;
	
EqOp ::=
	EQUAL
	|
	NOT_EQUAL
	;

CondOp ::=
	AND
	|
	OR
	;
	
Literal ::=
	INT_LITERAL
	|
	BOOLEAN_LITERAL:booleanLiteral
	{:
		RESULT = new BooleanLiteral((String)booleanLiteral);
	:}
	|
	CHAR_LITERAL:charLiteral
	{:
		//RESULT = new CharLiteral((char)charLiteral);
	:}
	;
