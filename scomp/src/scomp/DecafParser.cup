package scomp;

import java_cup.runtime.*;

terminal BOOLEAN, BREAK, CALLOUT, CLASS, CONTINUE, ELSE, IF, INT, RETURN, VOID, WHILE;
terminal LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET;
terminal COMMA, SEMI_COLON, NOT, PLUS, MINUS, TIMES, DIVIDE, MODULO, ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT;
terminal BITWISE_ROTATE_RIGHT, LESSER, GREATER, LESSER_OR_EQUAL, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL, AND, OR;
terminal int INT_LITERAL;
terminal boolean BOOLEAN_LITERAL;
terminal char CHAR_LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;

non terminal Program;
non terminal FieldDecl, MethodDecl, Block, VarDecl, Type, Statement, MethodCall, MethodName, Location, Expr, MoreExpr, CalloutArg, MoreCalloutArg;
non terminal CallingArgs, ElseBlock, ReturnExpr, MoreVar, MoreVarDecl, MoreStatement, ReturnType, MethodArgs, MoreFields, MoreFieldDecls, MoreMethodDecls;
non terminal BinOp, ArithOp, RelOp, EqOp, CondOp;
non terminal Literal;
non terminal BoolLiteral;
non terminal DecimalLiteral, HexLiteral;

precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left LESSER, LESSER_OR_EQUAL, GREATER_OR_EQUAL, GREATER;
precedence left ARITHMETIC_SHIFT_LEFT, ARITHMETIC_SHIFT_RIGHT, BITWISE_ROTATE_RIGHT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MODULO;
precedence left NOT;

/* Error here
MethodCall ::= MethodName LEFT_PARENTHESIS RIGHT_PARENTHESIS
			   | MethodName LEFT_PARENTHESIS MoreExpr RIGHT_PARENTHESIS
			   | CALLOUT LEFT_PARENTHESIS STRING_LITERAL CallingArgs RIGHT_PARENTHESIS
			   ;
MoreExpr ::= Expr 
			 | Expr COMMA MoreExpr
			 ;
*/
MethodName ::= Literal;
Location ::= Literal 
			 | Literal LEFT_BRACKET Expr RIGHT_BRACKET
			 ;
Expr ::= Location 
		 | MethodCall 
		 | Literal 
		 | Expr BinOp Expr 
		 | MINUS Expr 
		 | NOT Expr 
		 | LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
		 ;
CallingArgs ::= COMMA MoreCalloutArg 
				| /*Zero Occurrence*/ 
				;
MoreCalloutArg ::= CalloutArg 
				   | CalloutArg COMMA MoreCalloutArg
				   ;
CalloutArg ::= Expr 
			   | STRING_LITERAL
			   ;
BinOp ::= ArithOp 
		  | RelOp 
		  | EqOp 
		  | CondOp
		  ;
ArithOp ::= PLUS 
		    | MINUS 
		    | TIMES 
		    | DIVIDE 
		    | MODULO 
		    | ARITHMETIC_SHIFT_LEFT 
		    | ARITHMETIC_SHIFT_RIGHT 
		    | BITWISE_ROTATE_RIGHT
		    ;
RelOp ::= LESSER 
		  | GREATER 
		  | LESSER_OR_EQUAL 
		  | GREATER_OR_EQUAL
		  ;
EqOp ::= EQUAL 
		 | NOT_EQUAL
		 ;
CondOp ::= AND 
		   | OR
		   ;
Literal ::= INT_LITERAL 
			| CHAR_LITERAL 
			| STRING_LITERAL
			;
DecimalLiteral ::= INT_LITERAL;
HexLiteral ::= INT_LITERAL;
BoolLiteral ::= BOOLEAN_LITERAL;

